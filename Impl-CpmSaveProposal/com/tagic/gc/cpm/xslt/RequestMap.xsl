<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="com/tagic/gc/cpm/xslt/RequestMap.map" md5sum="af9ba5dccc38daf3c314740b1922a745" version="8.0.501" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		RequestMap.map
*   Map declaration(s):	RequestMap
*   Input file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FImpl-GcCpm%257DcpmSharedBO/message%3D%257Bhttp%253A%252F%252FImpl-GcCpmLibrary%252FPaceGCCPMIntegration%257DpaceCPMGCProposalSyncRequestMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FImpl-GcCpm%257DcpmSharedBO/message%3D%257Bhttp%253A%252F%252FImpl-GcCpmLibrary%252FGCIntegrationCPM%257DcpmGCProposalSyncRequestMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xltxe="http://www.ibm.com/xmlns/prod/xltxe-j"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://Impl-GcCpm"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:in="wsdl.http://Impl-GcCpmLibrary/PaceGCCPMIntegration"
    xmlns:io="http://www.w3.org/2005/08/addressing"
    xmlns:in2="http://NBDATA"
    xmlns:io3="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io4="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:in3="http://Impl-GcCpmLibrary/PaceGCCPMIntegration"
    xmlns:out2="http://Impl-GcCpmLibrary/GCIntegrationCPM"
    xmlns:out3="http://Impl-GcCpmLibrary"
    xmlns:out="wsdl.http://Impl-GcCpmLibrary/GCIntegrationCPM"
    xmlns:MapUtils="com.ibm.wbiserver.transform.util.MapUtils"
    xmlns:map="http://Impl-GcCpm/com/tagic/gc/cpm/xslt/RequestMap"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set fn math MapUtils map xltxe msl"
    version="2.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>
  <xltxe:java-extension prefix="MapUtils" class="com.ibm.wbiserver.transform.util.MapUtils"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io4:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:RequestMap2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io4:smo" mode="map:RequestMap"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io4:smo" to "io4:smo".  -->
  <xsl:template match="io4:smo"  mode="map:RequestMap">
    <io4:smo>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:cpmGCProposalSyncRequestMsg'"/>
        </xsl:attribute>
        <out2:cpmGCProposalSync>
          <cpmGCRequest>
            <!-- a simple mapping with no associated source:  to "source"(string) -->
            <xsl:element name="source">
              <xsl:text>ESB</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "medium"(string) -->
            <xsl:element name="medium">
              <xsl:text>ESB</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "campaign"(string) -->
            <xsl:element name="campaign">
              <xsl:text>ESB</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "productCode"(string) -->
            <xsl:element name="productCode">
              <xsl:text>1714</xsl:text>
            </xsl:element>
            <inputXML>
              <PropRisksCol>
                <risks>
                  <propRisksCoverDetailsCol>
                    <name>
                      <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
                      <xsl:element name="namespaceURI">
                        <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "localPart"(string) -->
                      <xsl:element name="localPart">
                        <xsl:text>PropRisks_CoverDetails_Col</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "prefix"(string) -->
                      <xsl:element name="prefix">
                        <xsl:text></xsl:text>
                      </xsl:element>
                    </name>
                    <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
                    <xsl:element name="declaredType">
                      <xsl:text>com.tagic.esb.cPMInsurenceClient.ArrayOfRisksCoverDetails</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "scope"(string) -->
                    <xsl:element name="scope">
                      <xsl:text>com.tagic.esb.cPMInsurenceClient.Risks</xsl:text>
                    </xsl:element>
                    <value>
                      <!-- a for-each transform: "in2:coverDetails"(paceCPMCoverDetailsBO) to "risksCoverDetails"(RiskCoverDetailsBO) -->
                      <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:coverDetails" mode="localCoverDetailsToRisksCoverDetails_2020880426"/>
                    </value>
                    <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
                    <xsl:element name="nil">
                      <xsl:text>false</xsl:text>
                    </xsl:element>
                  </propRisksCoverDetailsCol>
                  <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"(double) to "propRisksDifferentialSI"(double) -->
                  <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI">
                    <xsl:element name="propRisksDifferentialSI">
                      <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"/>
                    </xsl:element>
                  </xsl:if>
                  <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "propRisksEndorsementAmount"(double) -->
                  <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
                    <xsl:element name="propRisksEndorsementAmount">
                      <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
                    </xsl:element>
                  </xsl:if>
                </risks>
              </PropRisksCol>
              <PropGeneralProposal_ClauseDetails_Col>
                <!-- a for-each transform: "in2:clauseDetails"(paceCPMClausesBO) to "generalProposalClauseDetails"(clauseDetailsBO) -->
                <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:clauseDetails" mode="localClauseDetailsToGeneralProposalClauseDetails_1760328594"/>
              </PropGeneralProposal_ClauseDetails_Col>
              <PropGeneralProposal_FinancierDetails_Col>
                <!-- a for-each transform: "in2:financierDetails"(paceCPMFinancierDetailsBO) to "generalProposalFinancierDetails"(financierDetailsBO) -->
                <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:financierDetails" mode="localFinancierDetailsToGeneralProposalFinancierDetails_64115263"/>
              </PropGeneralProposal_FinancierDetails_Col>
              <!-- a simple mapping with no associated source:  to "ProductType"(string) -->
              <xsl:element name="ProductType">
                <xsl:text>SB</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropRisks_RiderCoverage"(string) -->
              <xsl:element name="PropRisks_RiderCoverage">
                <xsl:text>NA</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropRisks_PaymentType_Mandatary"(string) -->
              <xsl:element name="PropRisks_PaymentType_Mandatary">
                <xsl:text>Annual</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:floaterCover"(string) to "PropRisks_CardExpiryMonth"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:floaterCover">
                <xsl:element name="PropRisks_CardExpiryMonth">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:floaterCover"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:uwName"(string) to "PropRisks_UWName"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:uwName">
                <xsl:element name="PropRisks_UWName">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:uwName"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmName"(string) to "PropRisks_ContactPerson"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmName">
                <xsl:element name="PropRisks_ContactPerson">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmName"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerMobileNo"(string) to "PropRisks_ContactNumber"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerMobileNo">
                <xsl:element name="PropRisks_ContactNumber">
                  <!-- variables for custom code -->
                  <xsl:variable name="customerMobileNo" select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerMobileNo"/>
                  <xsl:value-of select="MapUtils:stringToDouble($customerMobileNo, '0.0')"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmEmail"(string) to "PropRisks_EmailId"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmEmail">
                <xsl:element name="PropRisks_EmailId">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmEmail"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropRisks_CustomerType"(string) -->
              <xsl:element name="PropRisks_CustomerType">
                <xsl:text>Mid-Market</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropRisks_AccountType"(string) -->
              <xsl:element name="PropRisks_AccountType">
                <xsl:text>Mid Market</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropRisks_IndustrySpecification"(string) -->
              <xsl:element name="PropRisks_IndustrySpecification">
                <xsl:text>Industry</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:user_channel"(string) to "PropRisks_ChannelType"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:user_channel">
                <xsl:element name="PropRisks_ChannelType">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:user_channel"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropRisks_PolicyWordings"(boolean) -->
              <xsl:element name="PropRisks_PolicyWordings">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "PropRisks_TotalPremiumForMBD"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
                <xsl:element name="PropRisks_TotalPremiumForMBD">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropRisks_MBDVariant"(string) -->
              <xsl:element name="PropRisks_MBDVariant">
                <xsl:text>EAR/CAR</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropRisks_MBDSubVariant"(string) -->
              <xsl:element name="PropRisks_MBDSubVariant">
                <xsl:text>CPM</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:internationalEmailID"(string) to "PropRisks_Text1"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:internationalEmailID">
                <xsl:element name="PropRisks_Text1">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:internationalEmailID"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:accountContractNo"(string) to "PropRisks_Product1224"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:accountContractNo">
                <xsl:element name="PropRisks_Product1224">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:accountContractNo"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropFinancierDetails_Validate"(boolean) -->
              <xsl:element name="PropFinancierDetails_Validate">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropClauseDetails_ProductCode_Mandatary"(double) -->
              <xsl:element name="PropClauseDetails_ProductCode_Mandatary">
                <xsl:text>1714</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropClauseDetails_DepartmentCode_Mandatary"(double) -->
              <xsl:element name="PropClauseDetails_DepartmentCode_Mandatary">
                <xsl:text>17</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ProductCode"(double) -->
              <xsl:element name="PropGeneralProposalInformation_ProductCode">
                <xsl:text>1714.0</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"(string) to "PropGeneralProposalInformation_DisplayOfficeCode"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value">
                <xsl:element name="PropGeneralProposalInformation_DisplayOfficeCode">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ServiceTaxExemptionCategory_Mandatary"(string) -->
              <xsl:element name="PropGeneralProposalInformation_ServiceTaxExemptionCategory_Mandatary">
                <xsl:text>No Exemption</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_BusinessType_Mandatary"(string) -->
              <xsl:element name="PropGeneralProposalInformation_BusinessType_Mandatary">
                <xsl:text>New Business</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_Sector_Mandatary"(string) -->
              <xsl:element name="PropGeneralProposalInformation_Sector_Mandatary">
                <xsl:text>Urban</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate"(string) to "PropGeneralProposalInformation_ProposalDate_Mandatary"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate">
                <xsl:element name="PropGeneralProposalInformation_ProposalDate_Mandatary">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:name"(string) to "PropGeneralProposalInformation_OfficeName"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:name">
                <xsl:element name="PropGeneralProposalInformation_OfficeName">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:name"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"(string) to "PropGeneralProposalInformation_OfficeCode"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value">
                <xsl:element name="PropGeneralProposalInformation_OfficeCode">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ReInsuranceInward"(string) -->
              <xsl:element name="PropGeneralProposalInformation_ReInsuranceInward">
                <xsl:text>No</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_PolicySchedule_Mandatary"(string) -->
              <xsl:element name="PropGeneralProposalInformation_PolicySchedule_Mandatary">
                <xsl:text>Yes</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo"(string) to "PropGeneralProposalInformation_PolicyNumberChar"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo">
                <xsl:element name="PropGeneralProposalInformation_PolicyNumberChar">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo"(string) to "PropGeneralProposalInformation_PolicyNo"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo">
                <xsl:element name="PropGeneralProposalInformation_PolicyNo">
                  <!-- variables for custom code -->
                  <xsl:variable name="policyNo" select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo"/>
                  <xsl:value-of select="MapUtils:stringToDouble($policyNo, '0.0')"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_CovernoteGenType"(string) -->
              <xsl:element name="PropGeneralProposalInformation_CovernoteGenType">
                <xsl:text>AUTO</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"(double) to "PropGeneralProposalInformation_TotalSi"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI">
                <xsl:element name="PropGeneralProposalInformation_TotalSi">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"(double) to "PropGeneralProposalInformation_EndorsementSi"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI">
                <xsl:element name="PropGeneralProposalInformation_EndorsementSi">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_OptionForCalculation"(string) -->
              <xsl:element name="PropGeneralProposalInformation_OptionForCalculation">
                <xsl:text>Yearly</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"(string) to "PropGeneralProposalInformation_BranchOfficeCode"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value">
                <xsl:element name="PropGeneralProposalInformation_BranchOfficeCode">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:applicationNo"(string) to "PropGeneralProposalInformation_RelationshipType"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:applicationNo">
                <xsl:element name="PropGeneralProposalInformation_RelationshipType">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:applicationNo"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate"(string) to "PropPolicyEffectivedate_Fromdate_Mandatary"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate">
                <xsl:element name="PropPolicyEffectivedate_Fromdate_Mandatary">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropPolicyEffectivedate_Fromhour_Mandatary"(string) -->
              <xsl:element name="PropPolicyEffectivedate_Fromhour_Mandatary">
                <xsl:text>00:01</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyEndDate"(string) to "PropPolicyEffectivedate_Todate_Mandatary"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyEndDate">
                <xsl:element name="PropPolicyEffectivedate_Todate_Mandatary">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyEndDate"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropPolicyEffectivedate_Tohour_Mandatary"(string) -->
              <xsl:element name="PropPolicyEffectivedate_Tohour_Mandatary">
                <xsl:text>23:59</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_TypeOfPolicy"(string) -->
              <xsl:element name="PropGeneralProposalInformation_TypeOfPolicy">
                <xsl:text>SYSTEM</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"(string) to "PropReferenceNoDate_ReferenceDate_Mandatary"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate">
                <xsl:element name="PropReferenceNoDate_ReferenceDate_Mandatary">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:remarks"(string) to "PropGeneralProposalInformation_Remarks"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:remarks">
                <xsl:element name="PropGeneralProposalInformation_Remarks">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:remarks"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_DepartmentCode"(double) -->
              <xsl:element name="PropGeneralProposalInformation_DepartmentCode">
                <xsl:text>17</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"(string) to "PropCustomerReferenceInfo_PolicyConversionDate"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate">
                <xsl:element name="PropCustomerReferenceInfo_PolicyConversionDate">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerID"(string) to "PropCustomerDtls_CustomerID_Mandatary"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerID">
                <xsl:element name="PropCustomerDtls_CustomerID_Mandatary">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerID"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerName"(string) to "PropCustomerDtls_CustomerName"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerName">
                <xsl:element name="PropCustomerDtls_CustomerName">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerName"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerType"(string) to "PropCustomerDtls_CustomerType"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerType">
                <xsl:element name="PropCustomerDtls_CustomerType">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerType"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_PolicyCurrency"(string) -->
              <xsl:element name="PropGeneralProposalInformation_PolicyCurrency">
                <xsl:text>INR</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey"(string) to "PropGeneralProposalInformation_ApplicationNumber"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey">
                <xsl:element name="PropGeneralProposalInformation_ApplicationNumber">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey"/>
                </xsl:element>
              </xsl:if>
              <!-- variables for custom code -->
              <xsl:variable name="netPremium" select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
              <xsl:choose>
                <xsl:when test="fn:boolean($netPremium) and $netPremium &gt; 100000">
                  <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ProposalFormNumber"(string) -->
                  <xsl:element name="PropGeneralProposalInformation_ProposalFormNumber">
                    <xsl:text>1234</xsl:text>
                  </xsl:element>
                </xsl:when>
                <xsl:otherwise>
                  <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ProposalFormNumber"(string) -->
                  <xsl:element name="PropGeneralProposalInformation_ProposalFormNumber">
                    <xsl:text></xsl:text>
                  </xsl:element>
                </xsl:otherwise>
              </xsl:choose>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ActiveFlag"(string) -->
              <xsl:element name="PropGeneralProposalInformation_ActiveFlag">
                <xsl:text>YES</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_DepartmentName"(string) -->
              <xsl:element name="PropGeneralProposalInformation_DepartmentName">
                <xsl:text>PropertyAndEnergy</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropDistributionChannel_SpecialDiscount"(double) -->
              <xsl:element name="PropDistributionChannel_SpecialDiscount">
                <xsl:text>100</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropDistributionChannel_OperationMode"(string) -->
              <xsl:element name="PropDistributionChannel_OperationMode">
                <xsl:text>VIEWPROPOSAL</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropDistributionChannel_BusinessSource_Mandatary"(string) -->
              <xsl:element name="PropDistributionChannel_BusinessSource_Mandatary">
                <xsl:text>INTERMEDIARY</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:channelType"(string) to "PropDistributionChannel_BusineeChanneltype"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:channelType">
                <xsl:element name="PropDistributionChannel_BusineeChanneltype">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:channelType"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropMODetails_TertiaryMOCode"(string) -->
              <xsl:element name="PropMODetails_TertiaryMOCode">
                <xsl:text>IPDS</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropVerticalDtls_TertiaryVerticalName"(string) -->
              <xsl:element name="PropVerticalDtls_TertiaryVerticalName">
                <xsl:text>1</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerCode"(string) to "PropIntermediaryDetails_IntermediaryCode"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerCode">
                <xsl:element name="PropIntermediaryDetails_IntermediaryCode">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerCode"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerName"(string) to "PropIntermediaryDetails_IntermediaryName"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerName">
                <xsl:element name="PropIntermediaryDetails_IntermediaryName">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerName"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerType"(string) to "PropIntermediaryDetails_IntermediaryType"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerType">
                <xsl:element name="PropIntermediaryDetails_IntermediaryType">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerType"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropCoverNoteDetails_Validate"(boolean) -->
              <xsl:element name="PropCoverNoteDetails_Validate">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "PropPremiumCalculation_NetPremium"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
                <xsl:element name="PropPremiumCalculation_NetPremium">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue"(double) to "PropPremiumCalculation_ServiceTax"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue">
                <xsl:element name="PropPremiumCalculation_ServiceTax">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropPremiumCalculation_StampDuty"(double) -->
              <xsl:element name="PropPremiumCalculation_StampDuty">
                <xsl:text>0.5</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalPremium"(double) to "PropPremiumCalculation_TotalPremium"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalPremium">
                <xsl:element name="PropPremiumCalculation_TotalPremium">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalPremium"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid[1]/in2:totalPremium"(double) to "PropPremiumCalculation_BasicPremium"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid[1]/in2:totalPremium">
                <xsl:element name="PropPremiumCalculation_BasicPremium">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid[1]/in2:totalPremium"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropPremiumCalculation_SP_PR_LTFactor"(double) -->
              <xsl:element name="PropPremiumCalculation_SP_PR_LTFactor">
                <xsl:text>1</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "PropPremiumCalculation_EndorsementPremium"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
                <xsl:element name="PropPremiumCalculation_EndorsementPremium">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue"(double) to "PropPremiumCalculation_EndorsementServiceTax"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue">
                <xsl:element name="PropPremiumCalculation_EndorsementServiceTax">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "PropPremiumCalculation_NetPremiumCurrency"(double) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
                <xsl:element name="PropPremiumCalculation_NetPremiumCurrency">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropProductDetails_ProductCode"(double) -->
              <xsl:element name="PropProductDetails_ProductCode">
                <xsl:text>1714</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropProductDetails_DepartmentCode"(double) -->
              <xsl:element name="PropProductDetails_DepartmentCode">
                <xsl:text>17</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_FinancierApplicability"(boolean) -->
              <xsl:element name="PropParameters_FinancierApplicability">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_CoInsuranceApplicability"(boolean) -->
              <xsl:element name="PropParameters_CoInsuranceApplicability">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ClauseApplicable"(boolean) -->
              <xsl:element name="PropParameters_ClauseApplicable">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ConditionApplicable"(boolean) -->
              <xsl:element name="PropParameters_ConditionApplicable">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ExclusionApplicable"(boolean) -->
              <xsl:element name="PropParameters_ExclusionApplicable">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_WarrentyApplicable"(boolean) -->
              <xsl:element name="PropParameters_WarrentyApplicable">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ShortPeriodLongPeriod"(boolean) -->
              <xsl:element name="PropParameters_ShortPeriodLongPeriod">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_CoverNoteApplicability"(boolean) -->
              <xsl:element name="PropParameters_CoverNoteApplicability">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ValidateExclusion"(boolean) -->
              <xsl:element name="PropParameters_ValidateExclusion">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_MinimumPremium"(boolean) -->
              <xsl:element name="PropParameters_MinimumPremium">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ValidateWarranty"(boolean) -->
              <xsl:element name="PropParameters_ValidateWarranty">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ValidateEndorsementData"(boolean) -->
              <xsl:element name="PropParameters_ValidateEndorsementData">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_TariffProduct"(boolean) -->
              <xsl:element name="PropParameters_TariffProduct">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_PopulateTransactionBegin"(boolean) -->
              <xsl:element name="PropParameters_PopulateTransactionBegin">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_CommissionApplicable"(boolean) -->
              <xsl:element name="PropParameters_CommissionApplicable">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_AfterFetch"(boolean) -->
              <xsl:element name="PropParameters_AfterFetch">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ValidateClause"(boolean) -->
              <xsl:element name="PropParameters_ValidateClause">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_RenewalAllowed"(boolean) -->
              <xsl:element name="PropParameters_RenewalAllowed">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropParameters_ValidateCondition"(boolean) -->
              <xsl:element name="PropParameters_ValidateCondition">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropCalculation_CalculateRate"(boolean) -->
              <xsl:element name="PropCalculation_CalculateRate">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropEndorsementDtls_CancellationForDoubleInsurance"(string) -->
              <xsl:element name="PropEndorsementDtls_CancellationForDoubleInsurance">
                <xsl:text>Automatic</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropEndorsementDtls_ISUWCompleted"(boolean) -->
              <xsl:element name="PropEndorsementDtls_ISUWCompleted">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "PropEndorsementDtls_CancellationDueToClaim"(boolean) -->
              <xsl:element name="PropEndorsementDtls_CancellationDueToClaim">
                <xsl:text>true</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"(string) to "PropEndorsementDtls_PartnerApplicationDate"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate">
                <xsl:element name="PropEndorsementDtls_PartnerApplicationDate">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropGeneralNodes_PolicyCoverVariant"(string) -->
              <xsl:element name="PropGeneralNodes_PolicyCoverVariant">
                <xsl:text>Energy</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey"(string) to "PropGeneralNodes_ApplicationNo"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey">
                <xsl:element name="PropGeneralNodes_ApplicationNo">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"(string) to "PropGeneralNodes_ApplicationDate"(string) -->
              <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate">
                <xsl:element name="PropGeneralNodes_ApplicationDate">
                  <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple mapping with no associated source:  to "PropProductName"(string) -->
              <xsl:element name="PropProductName">
                <xsl:text>ContractorsPlantAndMachineryInsurance</xsl:text>
              </xsl:element>
            </inputXML>
            <otherDetailsGridXML>
              <Root>
                <!-- a simple mapping with no associated source:  to "Code"(string) -->
                <xsl:element name="Code">
                  <xsl:text>1714</xsl:text>
                </xsl:element>
                <!-- a simple mapping with no associated source:  to "Name"(string) -->
                <xsl:element name="Name">
                  <xsl:text>CPMInsurance</xsl:text>
                </xsl:element>
                <OtherDetailsGrid>
                  <SMENONSME>
                    <!-- a simple mapping with no associated source:  to "Name"(string) -->
                    <xsl:element name="Name">
                      <xsl:text>SME/NON-SME</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "Value"(string) -->
                    <xsl:element name="Value">
                      <xsl:text>GRP1137</xsl:text>
                    </xsl:element>
                    <SMENONSME>
                      <!-- a simple mapping with no associated source:  to "Type"(string) -->
                      <xsl:element name="Type">
                        <xsl:text>GroupData</xsl:text>
                      </xsl:element>
                      <SMEApplicability>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>SMEApplicability</xsl:text>
                        </xsl:element>
                        <!-- a simple data mapping: "body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:smeApplicability"(string) to "Value"(string) -->
                        <xsl:if test="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:smeApplicability">
                          <xsl:element name="Value">
                            <xsl:value-of select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:smeApplicability"/>
                          </xsl:element>
                        </xsl:if>
                        <!-- a simple mapping with no associated source:  to "Type"(string) -->
                        <xsl:element name="Type">
                          <xsl:text>String</xsl:text>
                        </xsl:element>
                      </SMEApplicability>
                    </SMENONSME>
                  </SMENONSME>
                  <RiskLocationDetails>
                    <!-- a simple mapping with no associated source:  to "Name"(string) -->
                    <xsl:element name="Name">
                      <xsl:text>Risk Location Details</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "Value"(string) -->
                    <xsl:element name="Value">
                      <xsl:text>GRP868</xsl:text>
                    </xsl:element>
                    <!-- a for-each transform: "in2:riskLocationDetails"(paceCPMRiskDetailsBO) to "RiskLocationDetails"(OtherDetailsRiskLocationBO) -->
                    <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:riskLocationDetails" mode="localRiskLocationDetailsToRiskLocationDetails_646244602"/>
                  </RiskLocationDetails>
                  <Deductibles>
                    <!-- a simple mapping with no associated source:  to "Name"(string) -->
                    <xsl:element name="Name">
                      <xsl:text>Deductibles</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "Value"(string) -->
                    <xsl:element name="Value">
                      <xsl:text>GRP871</xsl:text>
                    </xsl:element>
                    <!-- a for-each transform: "in2:deductibles"(paceCPMDeductibles) to "Deductibles"(deductibleBO) -->
                    <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:deductibles" mode="localDeductiblesToDeductibles_703067102"/>
                  </Deductibles>
                  <ClauseWordings>
                    <!-- a simple mapping with no associated source:  to "Name"(string) -->
                    <xsl:element name="Name">
                      <xsl:text>Clause Wordings</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "Value"(string) -->
                    <xsl:element name="Value">
                      <xsl:text>GRP893</xsl:text>
                    </xsl:element>
                    <!-- a for-each transform: "in2:clauseWording"(ClauseDetailsBO) to "ClauseWordings"(clauseWordingsBO) -->
                    <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:clauseWording" mode="localClauseWordingToClauseWordings_840111531"/>
                  </ClauseWordings>
                  <AdditionalInsuredDetail>
                    <!-- a simple mapping with no associated source:  to "Name"(string) -->
                    <xsl:element name="Name">
                      <xsl:text>AdditionalInsuredDetail</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "Value"(string) -->
                    <xsl:element name="Value">
                      <xsl:text>GRP940</xsl:text>
                    </xsl:element>
                    <!-- a for-each transform: "in2:additionalInsuredDetails"(NameValueBO) to "AdditionalInsuredDetail"(additionalInsuredBO) -->
                    <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:additionalInsuredDetails" mode="localAdditionalInsuredDetailsToAdditionalInsuredDetail_245131884"/>
                  </AdditionalInsuredDetail>
                  <WarrantyDetails>
                    <!-- a simple mapping with no associated source:  to "Name"(string) -->
                    <xsl:element name="Name">
                      <xsl:text>Warranty Details</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "Value"(string) -->
                    <xsl:element name="Value">
                      <xsl:text>GRP941</xsl:text>
                    </xsl:element>
                    <!-- a for-each transform: "in2:warrantyDetails"(NameValueBO) to "WarrantyDetails"(warrantyDetailsBO) -->
                    <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:warrantyDetails" mode="localWarrantyDetailsToWarrantyDetails_60469592"/>
                  </WarrantyDetails>
                  <OtherDetails>
                    <!-- a simple mapping with no associated source:  to "Name"(string) -->
                    <xsl:element name="Name">
                      <xsl:text>Other Details</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "Value"(string) -->
                    <xsl:element name="Value">
                      <xsl:text>GRP99</xsl:text>
                    </xsl:element>
                    <!-- a for-each transform: "in2:otherDetails"(paceCPMOthersDetailBO) to "OtherDetails"(otherDetailsBO) -->
                    <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:otherDetails" mode="localOtherDetailsToOtherDetails_1157686316"/>
                  </OtherDetails>
                  <!-- variables for custom code -->
                  <xsl:variable name="floaterCover" select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:floaterCover"/>
                  <xsl:variable name="addOnCovers" select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers"/>
                  <xsl:variable name="cpmGrid" select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid"/>
                  <xsl:choose>
                    <xsl:when test="fn:boolean($floaterCover) and $floaterCover != &apos;&apos; and $floaterCover != &apos;Yes&apos;">
                      <AddonCoversClauses>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>Add on Covers/Clauses</xsl:text>
                        </xsl:element>
                        <!-- a simple mapping with no associated source:  to "Value"(string) -->
                        <xsl:element name="Value">
                          <xsl:text>GRP870</xsl:text>
                        </xsl:element>
                        <!-- a for-each transform: "in2:addOnCovers"(paceCPMCovers) to "AddonCoversClauses"(addOnCoverBO) -->
                        <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers" mode="localAddOnCoversToAddonCoversClauses_456800579"/>
                      </AddonCoversClauses>
                      <CPMGrid>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>CPM Grid</xsl:text>
                        </xsl:element>
                        <!-- a simple mapping with no associated source:  to "Value"(string) -->
                        <xsl:element name="Value">
                          <xsl:text>GRP925</xsl:text>
                        </xsl:element>
                        <!-- a for-each transform: "in2:cpmGrid"(paceCPMCovers) to "CPMGrid"(cpmGridBO) -->
                        <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid" mode="localCpmGridToCPMGrid_1764274248"/>
                      </CPMGrid>
                      <CPMFloaterPolicyAddonCoversClausesGrid>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>CPM Floater Policy Add on Covers/Clauses Grid</xsl:text>
                        </xsl:element>
                        <!-- a simple mapping with no associated source:  to "Value"(string) -->
                        <xsl:element name="Value">
                          <xsl:text>GRP928</xsl:text>
                        </xsl:element>
                        <!-- a for-each transform: "in2:addOnCovers"(paceCPMCovers) to "CPMFloaterPolicyAddonCoversClausesGrid"(addOnCoverBO) -->
                        <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers" mode="localAddOnCoversToCPMFloaterPolicyAddonCoversClausesGrid_1019917724"/>
                      </CPMFloaterPolicyAddonCoversClausesGrid>
                      <CPMFloaterPolicyGrid>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>CPM Floater Policy Grid</xsl:text>
                        </xsl:element>
                        <!-- a simple mapping with no associated source:  to "Value"(string) -->
                        <xsl:element name="Value">
                          <xsl:text>GRP927</xsl:text>
                        </xsl:element>
                        <!-- a for-each transform: "in2:cpmGrid"(paceCPMCovers) to "CPMFloaterPolicyGrid"(floaterPolicyGridBO) -->
                        <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid" mode="localCpmGridToCPMFloaterPolicyGrid_835881468"/>
                      </CPMFloaterPolicyGrid>
                    </xsl:when>
                    <xsl:otherwise>
                      <AddonCoversClauses>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>Add on Covers/Clauses</xsl:text>
                        </xsl:element>
                        <!-- a simple mapping with no associated source:  to "Value"(string) -->
                        <xsl:element name="Value">
                          <xsl:text>GRP870</xsl:text>
                        </xsl:element>
                        <!-- a for-each transform: "in2:addOnCovers"(paceCPMCovers) to "AddonCoversClauses"(addOnCoverBO) -->
                        <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers" mode="localAddOnCoversToAddonCoversClauses_1825797407"/>
                      </AddonCoversClauses>
                      <CPMGrid>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>CPM Grid</xsl:text>
                        </xsl:element>
                        <!-- a simple mapping with no associated source:  to "Value"(string) -->
                        <xsl:element name="Value">
                          <xsl:text>GRP925</xsl:text>
                        </xsl:element>
                        <!-- a for-each transform: "in2:cpmGrid"(paceCPMCovers) to "CPMGrid"(cpmGridBO) -->
                        <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid" mode="localCpmGridToCPMGrid_1107709712"/>
                      </CPMGrid>
                      <CPMFloaterPolicyAddonCoversClausesGrid>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>CPM Floater Policy Add on Covers/Clauses Grid</xsl:text>
                        </xsl:element>
                        <!-- a simple mapping with no associated source:  to "Value"(string) -->
                        <xsl:element name="Value">
                          <xsl:text>GRP928</xsl:text>
                        </xsl:element>
                        <!-- a for-each transform: "in2:addOnCovers"(paceCPMCovers) to "CPMFloaterPolicyAddonCoversClausesGrid"(addOnCoverBO) -->
                        <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers" mode="localAddOnCoversToCPMFloaterPolicyAddonCoversClausesGrid_296244812"/>
                      </CPMFloaterPolicyAddonCoversClausesGrid>
                      <CPMFloaterPolicyGrid>
                        <!-- a simple mapping with no associated source:  to "Name"(string) -->
                        <xsl:element name="Name">
                          <xsl:text>CPM Floater Policy Grid</xsl:text>
                        </xsl:element>
                        <!-- a simple mapping with no associated source:  to "Value"(string) -->
                        <xsl:element name="Value">
                          <xsl:text>GRP927</xsl:text>
                        </xsl:element>
                        <!-- a for-each transform: "in2:cpmGrid"(paceCPMCovers) to "CPMFloaterPolicyGrid"(floaterPolicyGridBO) -->
                        <xsl:apply-templates select="body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid" mode="localCpmGridToCPMFloaterPolicyGrid_313841642"/>
                      </CPMFloaterPolicyGrid>
                    </xsl:otherwise>
                  </xsl:choose>
                </OtherDetailsGrid>
              </Root>
            </otherDetailsGridXML>
            <!-- a simple mapping with no associated source:  to "modeOfOperation"(string) -->
            <xsl:element name="modeOfOperation">
              <xsl:text>NEWPOLICY</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "userId"(string) -->
            <xsl:element name="userId">
              <xsl:text>TASKUSER</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "userRole"(string) -->
            <xsl:element name="userRole">
              <xsl:text>ADMIN</xsl:text>
            </xsl:element>
          </cpmGCRequest>
        </out2:cpmGCProposalSync>
      </body>
    </io4:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io4:smo" to "io4:smo".  -->
  <xsl:template name="map:RequestMap2">
    <xsl:param name="smo"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:cpmGCProposalSyncRequestMsg'"/>
      </xsl:attribute>
      <out2:cpmGCProposalSync>
        <cpmGCRequest>
          <!-- a simple mapping with no associated source:  to "source"(string) -->
          <xsl:element name="source">
            <xsl:text>ESB</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "medium"(string) -->
          <xsl:element name="medium">
            <xsl:text>ESB</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "campaign"(string) -->
          <xsl:element name="campaign">
            <xsl:text>ESB</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "productCode"(string) -->
          <xsl:element name="productCode">
            <xsl:text>1714</xsl:text>
          </xsl:element>
          <inputXML>
            <PropRisksCol>
              <risks>
                <propRisksCoverDetailsCol>
                  <name>
                    <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
                    <xsl:element name="namespaceURI">
                      <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "localPart"(string) -->
                    <xsl:element name="localPart">
                      <xsl:text>PropRisks_CoverDetails_Col</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "prefix"(string) -->
                    <xsl:element name="prefix">
                      <xsl:text></xsl:text>
                    </xsl:element>
                  </name>
                  <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
                  <xsl:element name="declaredType">
                    <xsl:text>com.tagic.esb.cPMInsurenceClient.ArrayOfRisksCoverDetails</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "scope"(string) -->
                  <xsl:element name="scope">
                    <xsl:text>com.tagic.esb.cPMInsurenceClient.Risks</xsl:text>
                  </xsl:element>
                  <value>
                    <!-- a for-each transform: "in2:coverDetails"(paceCPMCoverDetailsBO) to "risksCoverDetails"(RiskCoverDetailsBO) -->
                    <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:coverDetails" mode="localCoverDetailsToRisksCoverDetails_2020880426"/>
                  </value>
                  <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
                  <xsl:element name="nil">
                    <xsl:text>false</xsl:text>
                  </xsl:element>
                </propRisksCoverDetailsCol>
                <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"(double) to "propRisksDifferentialSI"(double) -->
                <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI">
                  <xsl:element name="propRisksDifferentialSI">
                    <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"/>
                  </xsl:element>
                </xsl:if>
                <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "propRisksEndorsementAmount"(double) -->
                <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
                  <xsl:element name="propRisksEndorsementAmount">
                    <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
                  </xsl:element>
                </xsl:if>
              </risks>
            </PropRisksCol>
            <PropGeneralProposal_ClauseDetails_Col>
              <!-- a for-each transform: "in2:clauseDetails"(paceCPMClausesBO) to "generalProposalClauseDetails"(clauseDetailsBO) -->
              <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:clauseDetails" mode="localClauseDetailsToGeneralProposalClauseDetails_1760328594"/>
            </PropGeneralProposal_ClauseDetails_Col>
            <PropGeneralProposal_FinancierDetails_Col>
              <!-- a for-each transform: "in2:financierDetails"(paceCPMFinancierDetailsBO) to "generalProposalFinancierDetails"(financierDetailsBO) -->
              <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:financierDetails" mode="localFinancierDetailsToGeneralProposalFinancierDetails_64115263"/>
            </PropGeneralProposal_FinancierDetails_Col>
            <!-- a simple mapping with no associated source:  to "ProductType"(string) -->
            <xsl:element name="ProductType">
              <xsl:text>SB</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropRisks_RiderCoverage"(string) -->
            <xsl:element name="PropRisks_RiderCoverage">
              <xsl:text>NA</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropRisks_PaymentType_Mandatary"(string) -->
            <xsl:element name="PropRisks_PaymentType_Mandatary">
              <xsl:text>Annual</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:floaterCover"(string) to "PropRisks_CardExpiryMonth"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:floaterCover">
              <xsl:element name="PropRisks_CardExpiryMonth">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:floaterCover"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:uwName"(string) to "PropRisks_UWName"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:uwName">
              <xsl:element name="PropRisks_UWName">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:uwName"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmName"(string) to "PropRisks_ContactPerson"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmName">
              <xsl:element name="PropRisks_ContactPerson">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmName"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerMobileNo"(string) to "PropRisks_ContactNumber"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerMobileNo">
              <xsl:element name="PropRisks_ContactNumber">
                <!-- variables for custom code -->
                <xsl:variable name="customerMobileNo" select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerMobileNo"/>
                <xsl:value-of select="MapUtils:stringToDouble($customerMobileNo, '0.0')"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmEmail"(string) to "PropRisks_EmailId"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmEmail">
              <xsl:element name="PropRisks_EmailId">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:rmEmail"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropRisks_CustomerType"(string) -->
            <xsl:element name="PropRisks_CustomerType">
              <xsl:text>Mid-Market</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropRisks_AccountType"(string) -->
            <xsl:element name="PropRisks_AccountType">
              <xsl:text>Mid Market</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropRisks_IndustrySpecification"(string) -->
            <xsl:element name="PropRisks_IndustrySpecification">
              <xsl:text>Industry</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:user_channel"(string) to "PropRisks_ChannelType"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:user_channel">
              <xsl:element name="PropRisks_ChannelType">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:user_channel"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropRisks_PolicyWordings"(boolean) -->
            <xsl:element name="PropRisks_PolicyWordings">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "PropRisks_TotalPremiumForMBD"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
              <xsl:element name="PropRisks_TotalPremiumForMBD">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropRisks_MBDVariant"(string) -->
            <xsl:element name="PropRisks_MBDVariant">
              <xsl:text>EAR/CAR</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropRisks_MBDSubVariant"(string) -->
            <xsl:element name="PropRisks_MBDSubVariant">
              <xsl:text>CPM</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:internationalEmailID"(string) to "PropRisks_Text1"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:internationalEmailID">
              <xsl:element name="PropRisks_Text1">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:internationalEmailID"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:accountContractNo"(string) to "PropRisks_Product1224"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:accountContractNo">
              <xsl:element name="PropRisks_Product1224">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:accountContractNo"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropFinancierDetails_Validate"(boolean) -->
            <xsl:element name="PropFinancierDetails_Validate">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropClauseDetails_ProductCode_Mandatary"(double) -->
            <xsl:element name="PropClauseDetails_ProductCode_Mandatary">
              <xsl:text>1714</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropClauseDetails_DepartmentCode_Mandatary"(double) -->
            <xsl:element name="PropClauseDetails_DepartmentCode_Mandatary">
              <xsl:text>17</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ProductCode"(double) -->
            <xsl:element name="PropGeneralProposalInformation_ProductCode">
              <xsl:text>1714.0</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"(string) to "PropGeneralProposalInformation_DisplayOfficeCode"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value">
              <xsl:element name="PropGeneralProposalInformation_DisplayOfficeCode">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ServiceTaxExemptionCategory_Mandatary"(string) -->
            <xsl:element name="PropGeneralProposalInformation_ServiceTaxExemptionCategory_Mandatary">
              <xsl:text>No Exemption</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_BusinessType_Mandatary"(string) -->
            <xsl:element name="PropGeneralProposalInformation_BusinessType_Mandatary">
              <xsl:text>New Business</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_Sector_Mandatary"(string) -->
            <xsl:element name="PropGeneralProposalInformation_Sector_Mandatary">
              <xsl:text>Urban</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate"(string) to "PropGeneralProposalInformation_ProposalDate_Mandatary"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate">
              <xsl:element name="PropGeneralProposalInformation_ProposalDate_Mandatary">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:name"(string) to "PropGeneralProposalInformation_OfficeName"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:name">
              <xsl:element name="PropGeneralProposalInformation_OfficeName">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:name"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"(string) to "PropGeneralProposalInformation_OfficeCode"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value">
              <xsl:element name="PropGeneralProposalInformation_OfficeCode">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ReInsuranceInward"(string) -->
            <xsl:element name="PropGeneralProposalInformation_ReInsuranceInward">
              <xsl:text>No</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_PolicySchedule_Mandatary"(string) -->
            <xsl:element name="PropGeneralProposalInformation_PolicySchedule_Mandatary">
              <xsl:text>Yes</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo"(string) to "PropGeneralProposalInformation_PolicyNumberChar"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo">
              <xsl:element name="PropGeneralProposalInformation_PolicyNumberChar">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo"(string) to "PropGeneralProposalInformation_PolicyNo"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo">
              <xsl:element name="PropGeneralProposalInformation_PolicyNo">
                <!-- variables for custom code -->
                <xsl:variable name="policyNo" select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyNo"/>
                <xsl:value-of select="MapUtils:stringToDouble($policyNo, '0.0')"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_CovernoteGenType"(string) -->
            <xsl:element name="PropGeneralProposalInformation_CovernoteGenType">
              <xsl:text>AUTO</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"(double) to "PropGeneralProposalInformation_TotalSi"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI">
              <xsl:element name="PropGeneralProposalInformation_TotalSi">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"(double) to "PropGeneralProposalInformation_EndorsementSi"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI">
              <xsl:element name="PropGeneralProposalInformation_EndorsementSi">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalSI"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_OptionForCalculation"(string) -->
            <xsl:element name="PropGeneralProposalInformation_OptionForCalculation">
              <xsl:text>Yearly</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"(string) to "PropGeneralProposalInformation_BranchOfficeCode"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value">
              <xsl:element name="PropGeneralProposalInformation_BranchOfficeCode">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:officeLocn/in2:value"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:applicationNo"(string) to "PropGeneralProposalInformation_RelationshipType"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:applicationNo">
              <xsl:element name="PropGeneralProposalInformation_RelationshipType">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:applicationNo"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate"(string) to "PropPolicyEffectivedate_Fromdate_Mandatary"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate">
              <xsl:element name="PropPolicyEffectivedate_Fromdate_Mandatary">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyStartDate"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropPolicyEffectivedate_Fromhour_Mandatary"(string) -->
            <xsl:element name="PropPolicyEffectivedate_Fromhour_Mandatary">
              <xsl:text>00:01</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyEndDate"(string) to "PropPolicyEffectivedate_Todate_Mandatary"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyEndDate">
              <xsl:element name="PropPolicyEffectivedate_Todate_Mandatary">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyEndDate"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropPolicyEffectivedate_Tohour_Mandatary"(string) -->
            <xsl:element name="PropPolicyEffectivedate_Tohour_Mandatary">
              <xsl:text>23:59</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_TypeOfPolicy"(string) -->
            <xsl:element name="PropGeneralProposalInformation_TypeOfPolicy">
              <xsl:text>SYSTEM</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"(string) to "PropReferenceNoDate_ReferenceDate_Mandatary"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate">
              <xsl:element name="PropReferenceNoDate_ReferenceDate_Mandatary">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:remarks"(string) to "PropGeneralProposalInformation_Remarks"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:remarks">
              <xsl:element name="PropGeneralProposalInformation_Remarks">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:remarks"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_DepartmentCode"(double) -->
            <xsl:element name="PropGeneralProposalInformation_DepartmentCode">
              <xsl:text>17</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"(string) to "PropCustomerReferenceInfo_PolicyConversionDate"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate">
              <xsl:element name="PropCustomerReferenceInfo_PolicyConversionDate">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerID"(string) to "PropCustomerDtls_CustomerID_Mandatary"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerID">
              <xsl:element name="PropCustomerDtls_CustomerID_Mandatary">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerID"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerName"(string) to "PropCustomerDtls_CustomerName"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerName">
              <xsl:element name="PropCustomerDtls_CustomerName">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerName"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerType"(string) to "PropCustomerDtls_CustomerType"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerType">
              <xsl:element name="PropCustomerDtls_CustomerType">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:customerType"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_PolicyCurrency"(string) -->
            <xsl:element name="PropGeneralProposalInformation_PolicyCurrency">
              <xsl:text>INR</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey"(string) to "PropGeneralProposalInformation_ApplicationNumber"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey">
              <xsl:element name="PropGeneralProposalInformation_ApplicationNumber">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey"/>
              </xsl:element>
            </xsl:if>
            <!-- variables for custom code -->
            <xsl:variable name="netPremium" select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
            <xsl:choose>
              <xsl:when test="fn:boolean($netPremium) and $netPremium &gt; 100000">
                <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ProposalFormNumber"(string) -->
                <xsl:element name="PropGeneralProposalInformation_ProposalFormNumber">
                  <xsl:text>1234</xsl:text>
                </xsl:element>
              </xsl:when>
              <xsl:otherwise>
                <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ProposalFormNumber"(string) -->
                <xsl:element name="PropGeneralProposalInformation_ProposalFormNumber">
                  <xsl:text></xsl:text>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_ActiveFlag"(string) -->
            <xsl:element name="PropGeneralProposalInformation_ActiveFlag">
              <xsl:text>YES</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropGeneralProposalInformation_DepartmentName"(string) -->
            <xsl:element name="PropGeneralProposalInformation_DepartmentName">
              <xsl:text>PropertyAndEnergy</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropDistributionChannel_SpecialDiscount"(double) -->
            <xsl:element name="PropDistributionChannel_SpecialDiscount">
              <xsl:text>100</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropDistributionChannel_OperationMode"(string) -->
            <xsl:element name="PropDistributionChannel_OperationMode">
              <xsl:text>VIEWPROPOSAL</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropDistributionChannel_BusinessSource_Mandatary"(string) -->
            <xsl:element name="PropDistributionChannel_BusinessSource_Mandatary">
              <xsl:text>INTERMEDIARY</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:channelType"(string) to "PropDistributionChannel_BusineeChanneltype"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:channelType">
              <xsl:element name="PropDistributionChannel_BusineeChanneltype">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:channelType"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropMODetails_TertiaryMOCode"(string) -->
            <xsl:element name="PropMODetails_TertiaryMOCode">
              <xsl:text>IPDS</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropVerticalDtls_TertiaryVerticalName"(string) -->
            <xsl:element name="PropVerticalDtls_TertiaryVerticalName">
              <xsl:text>1</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerCode"(string) to "PropIntermediaryDetails_IntermediaryCode"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerCode">
              <xsl:element name="PropIntermediaryDetails_IntermediaryCode">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerCode"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerName"(string) to "PropIntermediaryDetails_IntermediaryName"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerName">
              <xsl:element name="PropIntermediaryDetails_IntermediaryName">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerName"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerType"(string) to "PropIntermediaryDetails_IntermediaryType"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerType">
              <xsl:element name="PropIntermediaryDetails_IntermediaryType">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:producerType"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropCoverNoteDetails_Validate"(boolean) -->
            <xsl:element name="PropCoverNoteDetails_Validate">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "PropPremiumCalculation_NetPremium"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
              <xsl:element name="PropPremiumCalculation_NetPremium">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue"(double) to "PropPremiumCalculation_ServiceTax"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue">
              <xsl:element name="PropPremiumCalculation_ServiceTax">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropPremiumCalculation_StampDuty"(double) -->
            <xsl:element name="PropPremiumCalculation_StampDuty">
              <xsl:text>0.5</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalPremium"(double) to "PropPremiumCalculation_TotalPremium"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalPremium">
              <xsl:element name="PropPremiumCalculation_TotalPremium">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalPremium"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid[1]/in2:totalPremium"(double) to "PropPremiumCalculation_BasicPremium"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid[1]/in2:totalPremium">
              <xsl:element name="PropPremiumCalculation_BasicPremium">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid[1]/in2:totalPremium"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropPremiumCalculation_SP_PR_LTFactor"(double) -->
            <xsl:element name="PropPremiumCalculation_SP_PR_LTFactor">
              <xsl:text>1</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "PropPremiumCalculation_EndorsementPremium"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
              <xsl:element name="PropPremiumCalculation_EndorsementPremium">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue"(double) to "PropPremiumCalculation_EndorsementServiceTax"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue">
              <xsl:element name="PropPremiumCalculation_EndorsementServiceTax">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:totalTaxValue"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"(double) to "PropPremiumCalculation_NetPremiumCurrency"(double) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium">
              <xsl:element name="PropPremiumCalculation_NetPremiumCurrency">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:netPremium"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropProductDetails_ProductCode"(double) -->
            <xsl:element name="PropProductDetails_ProductCode">
              <xsl:text>1714</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropProductDetails_DepartmentCode"(double) -->
            <xsl:element name="PropProductDetails_DepartmentCode">
              <xsl:text>17</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_FinancierApplicability"(boolean) -->
            <xsl:element name="PropParameters_FinancierApplicability">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_CoInsuranceApplicability"(boolean) -->
            <xsl:element name="PropParameters_CoInsuranceApplicability">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ClauseApplicable"(boolean) -->
            <xsl:element name="PropParameters_ClauseApplicable">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ConditionApplicable"(boolean) -->
            <xsl:element name="PropParameters_ConditionApplicable">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ExclusionApplicable"(boolean) -->
            <xsl:element name="PropParameters_ExclusionApplicable">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_WarrentyApplicable"(boolean) -->
            <xsl:element name="PropParameters_WarrentyApplicable">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ShortPeriodLongPeriod"(boolean) -->
            <xsl:element name="PropParameters_ShortPeriodLongPeriod">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_CoverNoteApplicability"(boolean) -->
            <xsl:element name="PropParameters_CoverNoteApplicability">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ValidateExclusion"(boolean) -->
            <xsl:element name="PropParameters_ValidateExclusion">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_MinimumPremium"(boolean) -->
            <xsl:element name="PropParameters_MinimumPremium">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ValidateWarranty"(boolean) -->
            <xsl:element name="PropParameters_ValidateWarranty">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ValidateEndorsementData"(boolean) -->
            <xsl:element name="PropParameters_ValidateEndorsementData">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_TariffProduct"(boolean) -->
            <xsl:element name="PropParameters_TariffProduct">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_PopulateTransactionBegin"(boolean) -->
            <xsl:element name="PropParameters_PopulateTransactionBegin">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_CommissionApplicable"(boolean) -->
            <xsl:element name="PropParameters_CommissionApplicable">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_AfterFetch"(boolean) -->
            <xsl:element name="PropParameters_AfterFetch">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ValidateClause"(boolean) -->
            <xsl:element name="PropParameters_ValidateClause">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_RenewalAllowed"(boolean) -->
            <xsl:element name="PropParameters_RenewalAllowed">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropParameters_ValidateCondition"(boolean) -->
            <xsl:element name="PropParameters_ValidateCondition">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropCalculation_CalculateRate"(boolean) -->
            <xsl:element name="PropCalculation_CalculateRate">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropEndorsementDtls_CancellationForDoubleInsurance"(string) -->
            <xsl:element name="PropEndorsementDtls_CancellationForDoubleInsurance">
              <xsl:text>Automatic</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropEndorsementDtls_ISUWCompleted"(boolean) -->
            <xsl:element name="PropEndorsementDtls_ISUWCompleted">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "PropEndorsementDtls_CancellationDueToClaim"(boolean) -->
            <xsl:element name="PropEndorsementDtls_CancellationDueToClaim">
              <xsl:text>true</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"(string) to "PropEndorsementDtls_PartnerApplicationDate"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate">
              <xsl:element name="PropEndorsementDtls_PartnerApplicationDate">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropGeneralNodes_PolicyCoverVariant"(string) -->
            <xsl:element name="PropGeneralNodes_PolicyCoverVariant">
              <xsl:text>Energy</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey"(string) to "PropGeneralNodes_ApplicationNo"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey">
              <xsl:element name="PropGeneralNodes_ApplicationNo">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:policyKey"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"(string) to "PropGeneralNodes_ApplicationDate"(string) -->
            <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate">
              <xsl:element name="PropGeneralNodes_ApplicationDate">
                <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:issuanceDate"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "PropProductName"(string) -->
            <xsl:element name="PropProductName">
              <xsl:text>ContractorsPlantAndMachineryInsurance</xsl:text>
            </xsl:element>
          </inputXML>
          <otherDetailsGridXML>
            <Root>
              <!-- a simple mapping with no associated source:  to "Code"(string) -->
              <xsl:element name="Code">
                <xsl:text>1714</xsl:text>
              </xsl:element>
              <!-- a simple mapping with no associated source:  to "Name"(string) -->
              <xsl:element name="Name">
                <xsl:text>CPMInsurance</xsl:text>
              </xsl:element>
              <OtherDetailsGrid>
                <SMENONSME>
                  <!-- a simple mapping with no associated source:  to "Name"(string) -->
                  <xsl:element name="Name">
                    <xsl:text>SME/NON-SME</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "Value"(string) -->
                  <xsl:element name="Value">
                    <xsl:text>GRP1137</xsl:text>
                  </xsl:element>
                  <SMENONSME>
                    <!-- a simple mapping with no associated source:  to "Type"(string) -->
                    <xsl:element name="Type">
                      <xsl:text>GroupData</xsl:text>
                    </xsl:element>
                    <SMEApplicability>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>SMEApplicability</xsl:text>
                      </xsl:element>
                      <!-- a simple data mapping: "$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:smeApplicability"(string) to "Value"(string) -->
                      <xsl:if test="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:smeApplicability">
                        <xsl:element name="Value">
                          <xsl:value-of select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:smeApplicability"/>
                        </xsl:element>
                      </xsl:if>
                      <!-- a simple mapping with no associated source:  to "Type"(string) -->
                      <xsl:element name="Type">
                        <xsl:text>String</xsl:text>
                      </xsl:element>
                    </SMEApplicability>
                  </SMENONSME>
                </SMENONSME>
                <RiskLocationDetails>
                  <!-- a simple mapping with no associated source:  to "Name"(string) -->
                  <xsl:element name="Name">
                    <xsl:text>Risk Location Details</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "Value"(string) -->
                  <xsl:element name="Value">
                    <xsl:text>GRP868</xsl:text>
                  </xsl:element>
                  <!-- a for-each transform: "in2:riskLocationDetails"(paceCPMRiskDetailsBO) to "RiskLocationDetails"(OtherDetailsRiskLocationBO) -->
                  <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:riskLocationDetails" mode="localRiskLocationDetailsToRiskLocationDetails_646244602"/>
                </RiskLocationDetails>
                <Deductibles>
                  <!-- a simple mapping with no associated source:  to "Name"(string) -->
                  <xsl:element name="Name">
                    <xsl:text>Deductibles</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "Value"(string) -->
                  <xsl:element name="Value">
                    <xsl:text>GRP871</xsl:text>
                  </xsl:element>
                  <!-- a for-each transform: "in2:deductibles"(paceCPMDeductibles) to "Deductibles"(deductibleBO) -->
                  <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:deductibles" mode="localDeductiblesToDeductibles_703067102"/>
                </Deductibles>
                <ClauseWordings>
                  <!-- a simple mapping with no associated source:  to "Name"(string) -->
                  <xsl:element name="Name">
                    <xsl:text>Clause Wordings</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "Value"(string) -->
                  <xsl:element name="Value">
                    <xsl:text>GRP893</xsl:text>
                  </xsl:element>
                  <!-- a for-each transform: "in2:clauseWording"(ClauseDetailsBO) to "ClauseWordings"(clauseWordingsBO) -->
                  <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:clauseWording" mode="localClauseWordingToClauseWordings_840111531"/>
                </ClauseWordings>
                <AdditionalInsuredDetail>
                  <!-- a simple mapping with no associated source:  to "Name"(string) -->
                  <xsl:element name="Name">
                    <xsl:text>AdditionalInsuredDetail</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "Value"(string) -->
                  <xsl:element name="Value">
                    <xsl:text>GRP940</xsl:text>
                  </xsl:element>
                  <!-- a for-each transform: "in2:additionalInsuredDetails"(NameValueBO) to "AdditionalInsuredDetail"(additionalInsuredBO) -->
                  <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:additionalInsuredDetails" mode="localAdditionalInsuredDetailsToAdditionalInsuredDetail_245131884"/>
                </AdditionalInsuredDetail>
                <WarrantyDetails>
                  <!-- a simple mapping with no associated source:  to "Name"(string) -->
                  <xsl:element name="Name">
                    <xsl:text>Warranty Details</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "Value"(string) -->
                  <xsl:element name="Value">
                    <xsl:text>GRP941</xsl:text>
                  </xsl:element>
                  <!-- a for-each transform: "in2:warrantyDetails"(NameValueBO) to "WarrantyDetails"(warrantyDetailsBO) -->
                  <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:warrantyDetails" mode="localWarrantyDetailsToWarrantyDetails_60469592"/>
                </WarrantyDetails>
                <OtherDetails>
                  <!-- a simple mapping with no associated source:  to "Name"(string) -->
                  <xsl:element name="Name">
                    <xsl:text>Other Details</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "Value"(string) -->
                  <xsl:element name="Value">
                    <xsl:text>GRP99</xsl:text>
                  </xsl:element>
                  <!-- a for-each transform: "in2:otherDetails"(paceCPMOthersDetailBO) to "OtherDetails"(otherDetailsBO) -->
                  <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:otherDetails" mode="localOtherDetailsToOtherDetails_1157686316"/>
                </OtherDetails>
                <!-- variables for custom code -->
                <xsl:variable name="floaterCover" select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:floaterCover"/>
                <xsl:variable name="addOnCovers" select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers"/>
                <xsl:variable name="cpmGrid" select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid"/>
                <xsl:choose>
                  <xsl:when test="fn:boolean($floaterCover) and $floaterCover != &apos;&apos; and $floaterCover != &apos;Yes&apos;">
                    <AddonCoversClauses>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>Add on Covers/Clauses</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "Value"(string) -->
                      <xsl:element name="Value">
                        <xsl:text>GRP870</xsl:text>
                      </xsl:element>
                      <!-- a for-each transform: "in2:addOnCovers"(paceCPMCovers) to "AddonCoversClauses"(addOnCoverBO) -->
                      <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers" mode="localAddOnCoversToAddonCoversClauses_456800579"/>
                    </AddonCoversClauses>
                    <CPMGrid>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>CPM Grid</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "Value"(string) -->
                      <xsl:element name="Value">
                        <xsl:text>GRP925</xsl:text>
                      </xsl:element>
                      <!-- a for-each transform: "in2:cpmGrid"(paceCPMCovers) to "CPMGrid"(cpmGridBO) -->
                      <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid" mode="localCpmGridToCPMGrid_1764274248"/>
                    </CPMGrid>
                    <CPMFloaterPolicyAddonCoversClausesGrid>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>CPM Floater Policy Add on Covers/Clauses Grid</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "Value"(string) -->
                      <xsl:element name="Value">
                        <xsl:text>GRP928</xsl:text>
                      </xsl:element>
                      <!-- a for-each transform: "in2:addOnCovers"(paceCPMCovers) to "CPMFloaterPolicyAddonCoversClausesGrid"(addOnCoverBO) -->
                      <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers" mode="localAddOnCoversToCPMFloaterPolicyAddonCoversClausesGrid_1019917724"/>
                    </CPMFloaterPolicyAddonCoversClausesGrid>
                    <CPMFloaterPolicyGrid>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>CPM Floater Policy Grid</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "Value"(string) -->
                      <xsl:element name="Value">
                        <xsl:text>GRP927</xsl:text>
                      </xsl:element>
                      <!-- a for-each transform: "in2:cpmGrid"(paceCPMCovers) to "CPMFloaterPolicyGrid"(floaterPolicyGridBO) -->
                      <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid" mode="localCpmGridToCPMFloaterPolicyGrid_835881468"/>
                    </CPMFloaterPolicyGrid>
                  </xsl:when>
                  <xsl:otherwise>
                    <AddonCoversClauses>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>Add on Covers/Clauses</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "Value"(string) -->
                      <xsl:element name="Value">
                        <xsl:text>GRP870</xsl:text>
                      </xsl:element>
                      <!-- a for-each transform: "in2:addOnCovers"(paceCPMCovers) to "AddonCoversClauses"(addOnCoverBO) -->
                      <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers" mode="localAddOnCoversToAddonCoversClauses_1825797407"/>
                    </AddonCoversClauses>
                    <CPMGrid>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>CPM Grid</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "Value"(string) -->
                      <xsl:element name="Value">
                        <xsl:text>GRP925</xsl:text>
                      </xsl:element>
                      <!-- a for-each transform: "in2:cpmGrid"(paceCPMCovers) to "CPMGrid"(cpmGridBO) -->
                      <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid" mode="localCpmGridToCPMGrid_1107709712"/>
                    </CPMGrid>
                    <CPMFloaterPolicyAddonCoversClausesGrid>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>CPM Floater Policy Add on Covers/Clauses Grid</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "Value"(string) -->
                      <xsl:element name="Value">
                        <xsl:text>GRP928</xsl:text>
                      </xsl:element>
                      <!-- a for-each transform: "in2:addOnCovers"(paceCPMCovers) to "CPMFloaterPolicyAddonCoversClausesGrid"(addOnCoverBO) -->
                      <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:addOnCovers" mode="localAddOnCoversToCPMFloaterPolicyAddonCoversClausesGrid_296244812"/>
                    </CPMFloaterPolicyAddonCoversClausesGrid>
                    <CPMFloaterPolicyGrid>
                      <!-- a simple mapping with no associated source:  to "Name"(string) -->
                      <xsl:element name="Name">
                        <xsl:text>CPM Floater Policy Grid</xsl:text>
                      </xsl:element>
                      <!-- a simple mapping with no associated source:  to "Value"(string) -->
                      <xsl:element name="Value">
                        <xsl:text>GRP927</xsl:text>
                      </xsl:element>
                      <!-- a for-each transform: "in2:cpmGrid"(paceCPMCovers) to "CPMFloaterPolicyGrid"(floaterPolicyGridBO) -->
                      <xsl:apply-templates select="$smo/body/in3:paceCPMGCProposalSync/paceCPMRequest/in2:cpmGrid" mode="localCpmGridToCPMFloaterPolicyGrid_313841642"/>
                    </CPMFloaterPolicyGrid>
                  </xsl:otherwise>
                </xsl:choose>
              </OtherDetailsGrid>
            </Root>
          </otherDetailsGridXML>
          <!-- a simple mapping with no associated source:  to "modeOfOperation"(string) -->
          <xsl:element name="modeOfOperation">
            <xsl:text>NEWPOLICY</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "userId"(string) -->
          <xsl:element name="userId">
            <xsl:text>TASKUSER</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "userRole"(string) -->
          <xsl:element name="userRole">
            <xsl:text>ADMIN</xsl:text>
          </xsl:element>
        </cpmGCRequest>
      </out2:cpmGCProposalSync>
    </body>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:coverDetails" to "risksCoverDetails".  -->
  <xsl:template match="in2:coverDetails"  mode="localCoverDetailsToRisksCoverDetails_2020880426">
    <risksCoverDetails>
      <!-- a simple data mapping: "in2:coverDetails/in2:cover_applicable"(string) to "propCoverDetailsApplicable"(boolean) -->
      <xsl:if test="in2:coverDetails/in2:cover_applicable">
        <propCoverDetailsApplicable>
          <!-- variables for custom code -->
          <xsl:variable name="cover_applicable" select="in2:coverDetails/in2:cover_applicable"/>
          <xsl:value-of select="MapUtils:stringToBoolean($cover_applicable, 'false')"/>
        </propCoverDetailsApplicable>
      </xsl:if>
      <!-- a simple mapping with no associated source:  to "propCoverDetailsCommision"(double) -->
      <propCoverDetailsCommision>
        <xsl:text>0.0</xsl:text>
      </propCoverDetailsCommision>
      <propCoverDetailsCoverGroups>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropCoverDetails_CoverGroups</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.RisksCoverDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:coverDetails/in2:cover_name"(string) to "value"(string) -->
        <xsl:if test="in2:coverDetails/in2:cover_name">
          <xsl:element name="value">
            <xsl:value-of select="in2:coverDetails/in2:cover_name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propCoverDetailsCoverGroups>
      <!-- a simple data mapping: "in2:coverDetails/in2:cover_sublimit_value"(string) to "propCoverDetailsDifferentialSI"(double) -->
      <xsl:if test="in2:coverDetails/in2:cover_sublimit_value">
        <propCoverDetailsDifferentialSI>
          <!-- variables for custom code -->
          <xsl:variable name="cover_sublimit_value" select="in2:coverDetails/in2:cover_sublimit_value"/>
          <xsl:value-of select="MapUtils:stringToDouble($cover_sublimit_value, '0.0')"/>
        </propCoverDetailsDifferentialSI>
      </xsl:if>
      <!-- a simple data mapping: "in2:coverDetails/in2:cover_premium_uw"(string) to "propCoverDetailsEndorsementAmount"(double) -->
      <xsl:if test="in2:coverDetails/in2:cover_premium_uw">
        <propCoverDetailsEndorsementAmount>
          <!-- variables for custom code -->
          <xsl:variable name="cover_premium_uw" select="in2:coverDetails/in2:cover_premium_uw"/>
          <xsl:value-of select="MapUtils:stringToDouble($cover_premium_uw, '0.0')"/>
        </propCoverDetailsEndorsementAmount>
      </xsl:if>
      <!-- a simple mapping with no associated source:  to "propCoverDetailsIsDataDeleted"(boolean) -->
      <propCoverDetailsIsDataDeleted>
        <xsl:text>false</xsl:text>
      </propCoverDetailsIsDataDeleted>
      <!-- a simple mapping with no associated source:  to "propCoverDetailsIsOldDataDeleted"(boolean) -->
      <propCoverDetailsIsOldDataDeleted>
        <xsl:text>false</xsl:text>
      </propCoverDetailsIsOldDataDeleted>
      <propCoverDetailsMMCPCode>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropCoverDetails_MMCPCode</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.RisksCoverDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:mmcpCode"(string) to "value"(string) -->
        <xsl:if test="in2:mmcpCode">
          <xsl:element name="value">
            <xsl:value-of select="in2:mmcpCode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propCoverDetailsMMCPCode>
      <!-- a simple data mapping: "in2:coverDetails/in2:cover_premium_uw"(string) to "propCoverDetailsPremium"(double) -->
      <xsl:if test="in2:coverDetails/in2:cover_premium_uw">
        <propCoverDetailsPremium>
          <!-- variables for custom code -->
          <xsl:variable name="cover_premium_uw1" select="in2:coverDetails/in2:cover_premium_uw"/>
          <xsl:value-of select="MapUtils:stringToDouble($cover_premium_uw1, '0.0')"/>
        </propCoverDetailsPremium>
      </xsl:if>
      <!-- a simple data mapping: "in2:coverDetails/in2:cover_revised_rate_uw"(string) to "propCoverDetailsRate"(double) -->
      <xsl:if test="in2:coverDetails/in2:cover_revised_rate_uw">
        <propCoverDetailsRate>
          <!-- variables for custom code -->
          <xsl:variable name="cover_revised_rate_uw" select="in2:coverDetails/in2:cover_revised_rate_uw"/>
          <xsl:value-of select="MapUtils:stringToDouble($cover_revised_rate_uw, '0.0')"/>
        </propCoverDetailsRate>
      </xsl:if>
      <!-- a simple data mapping: "in2:coverDetails/in2:cover_sublimit_value"(string) to "propCoverDetailsSumInsured"(double) -->
      <xsl:if test="in2:coverDetails/in2:cover_sublimit_value">
        <propCoverDetailsSumInsured>
          <!-- variables for custom code -->
          <xsl:variable name="cover_sublimit_value1" select="in2:coverDetails/in2:cover_sublimit_value"/>
          <xsl:value-of select="MapUtils:stringToDouble($cover_sublimit_value1, '0.0')"/>
        </propCoverDetailsSumInsured>
      </xsl:if>
      <!-- a simple mapping with no associated source:  to "propCoverDetailsCumulativeEndAmount"(double) -->
      <propCoverDetailsCumulativeEndAmount>
        <xsl:text>0.0</xsl:text>
      </propCoverDetailsCumulativeEndAmount>
      <!-- a simple mapping with no associated source:  to "propCoverDetailsCumulativeEndSerTax"(double) -->
      <propCoverDetailsCumulativeEndSerTax>
        <xsl:text>0.0</xsl:text>
      </propCoverDetailsCumulativeEndSerTax>
      <!-- a simple mapping with no associated source:  to "propCoverDetailsCumulativePremium"(double) -->
      <propCoverDetailsCumulativePremium>
        <xsl:text>0.0</xsl:text>
      </propCoverDetailsCumulativePremium>
      <!-- a simple mapping with no associated source:  to "propCoverDetailsCumulativeServuceTax"(double) -->
      <propCoverDetailsCumulativeServuceTax>
        <xsl:text>0.0</xsl:text>
      </propCoverDetailsCumulativeServuceTax>
    </risksCoverDetails>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:clauseDetails" to "generalProposalClauseDetails".  -->
  <xsl:template match="in2:clauseDetails"  mode="localClauseDetailsToGeneralProposalClauseDetails_1760328594">
    <generalProposalClauseDetails>
      <!-- a simple data mapping: "in2:clauseCode"(int) to "propClauseDetailsClauseCodeMandatary"(double) -->
      <xsl:if test="in2:clauseCode">
        <propClauseDetailsClauseCodeMandatary>
          <xsl:value-of select="in2:clauseCode"/>
        </propClauseDetailsClauseCodeMandatary>
      </xsl:if>
      <propClauseDetailsClauseNumberMandatary>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropClauseDetails_ClauseNumber_Mandatary</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalClauseDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:clauseNumber"(int) to "value"(string) -->
        <xsl:if test="in2:clauseNumber">
          <xsl:element name="value">
            <xsl:value-of select="in2:clauseNumber"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propClauseDetailsClauseNumberMandatary>
      <propClauseDetailsClauseShortDescription>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropClauseDetails_ClauseShortDescription</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalClauseDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:clauseDescription"(string) to "value"(string) -->
        <xsl:if test="in2:clauseDescription">
          <xsl:element name="value">
            <xsl:value-of select="in2:clauseDescription"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propClauseDetailsClauseShortDescription>
      <propClauseDetailsClauseType>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropClauseDetails_ClauseType</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalClauseDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:clauseType"(string) to "value"(string) -->
        <xsl:if test="in2:clauseType">
          <xsl:element name="value">
            <xsl:value-of select="in2:clauseType"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propClauseDetailsClauseType>
      <!-- a simple data mapping: "in2:clauseMandatory"(boolean) to "propClauseDetailsDefaultMandatary"(boolean) -->
      <xsl:if test="in2:clauseMandatory">
        <propClauseDetailsDefaultMandatary>
          <xsl:value-of select="in2:clauseMandatory"/>
        </propClauseDetailsDefaultMandatary>
      </xsl:if>
      <!-- a simple mapping with no associated source:  to "propClauseDetailsIsDataDeleted"(boolean) -->
      <propClauseDetailsIsDataDeleted>
        <xsl:text>false</xsl:text>
      </propClauseDetailsIsDataDeleted>
      <!-- a simple mapping with no associated source:  to "propClauseDetailsIsOldDataDeleted"(boolean) -->
      <propClauseDetailsIsOldDataDeleted>
        <xsl:text>false</xsl:text>
      </propClauseDetailsIsOldDataDeleted>
    </generalProposalClauseDetails>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:financierDetails" to "generalProposalFinancierDetails".  -->
  <xsl:template match="in2:financierDetails"  mode="localFinancierDetailsToGeneralProposalFinancierDetails_64115263">
    <generalProposalFinancierDetails>
      <propFinancierDetailsAddressMandatary>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_Address_Mandatary</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:hypothecation_bank_address"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:hypothecation_bank_address">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:hypothecation_bank_address"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsAddressMandatary>
      <propFinancierDetailsAgreementType>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_AgreementType</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "value"(string) -->
        <xsl:element name="value">
          <xsl:text>Hypothecation</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsAgreementType>
      <propFinancierDetailsBranchName>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_BranchName</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "value"(string) -->
        <xsl:element name="value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsBranchName>
      <propFinancierDetailsCityCode>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_CityCode</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:hypothecation_city/in2:value"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:hypothecation_city/in2:value">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:hypothecation_city/in2:value"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsCityCode>
      <propFinancierDetailsCityMandatary>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_City_Mandatary</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:hypothecation_city/in2:name"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:hypothecation_city/in2:name">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:hypothecation_city/in2:name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsCityMandatary>
      <propFinancierDetailsCountry>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_Country</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "value"(string) -->
        <xsl:element name="value">
          <xsl:text>64</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsCountry>
      <propFinancierDetailsDistrictCode>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_DistrictCode</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:hypothecation_district/in2:value"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:hypothecation_district/in2:value">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:hypothecation_district/in2:value"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsDistrictCode>
      <propFinancierDetailsDistrictMandatary>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_District_Mandatary</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:hypothecation_district/in2:name"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:hypothecation_district/in2:name">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:hypothecation_district/in2:name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsDistrictMandatary>
      <!-- a simple data mapping: "in2:financierCode"(string) to "propFinancierDetailsFinancierCodeMandatary"(double) -->
      <xsl:if test="in2:financierCode">
        <propFinancierDetailsFinancierCodeMandatary>
          <!-- variables for custom code -->
          <xsl:variable name="financierCode" select="in2:financierCode"/>
          <xsl:value-of select="MapUtils:stringToDouble($financierCode, '0.0')"/>
        </propFinancierDetailsFinancierCodeMandatary>
      </xsl:if>
      <propFinancierDetailsFinancierName>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_FinancierName</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:hypothecation_bank_name"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:hypothecation_bank_name">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:hypothecation_bank_name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsFinancierName>
      <propFinancierDetailsFinancierStatus>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_FinancierStatus</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "value"(string) -->
        <xsl:element name="value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsFinancierStatus>
      <!-- a simple mapping with no associated source:  to "propFinancierDetailsIsDataDeleted"(boolean) -->
      <propFinancierDetailsIsDataDeleted>
        <xsl:text>false</xsl:text>
      </propFinancierDetailsIsDataDeleted>
      <!-- a simple mapping with no associated source:  to "propFinancierDetailsIsOldDataDeleted"(boolean) -->
      <propFinancierDetailsIsOldDataDeleted>
        <xsl:text>false</xsl:text>
      </propFinancierDetailsIsOldDataDeleted>
      <propFinancierDetailsLoanAccountNo>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_LoanAccountNo</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:banca_loan_acct_number"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:banca_loan_acct_number">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:banca_loan_acct_number"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsLoanAccountNo>
      <!-- a simple data mapping: "in2:financierData/in2:hypothecation_bank_zipcode"(string) to "propFinancierDetailsPincodeMandatary"(double) -->
      <xsl:if test="in2:financierData/in2:hypothecation_bank_zipcode">
        <propFinancierDetailsPincodeMandatary>
          <!-- variables for custom code -->
          <xsl:variable name="hypothecation_bank_zipcode" select="in2:financierData/in2:hypothecation_bank_zipcode"/>
          <xsl:value-of select="MapUtils:stringToDouble($hypothecation_bank_zipcode, '0.0')"/>
        </propFinancierDetailsPincodeMandatary>
      </xsl:if>
      <propFinancierDetailsRemarks>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_Remarks</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "value"(string) -->
        <xsl:element name="value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsRemarks>
      <!-- a simple data mapping: "in2:srNo"(int) to "propFinancierDetailsSrNoMandatary"(double) -->
      <xsl:if test="in2:srNo">
        <propFinancierDetailsSrNoMandatary>
          <xsl:value-of select="in2:srNo"/>
        </propFinancierDetailsSrNoMandatary>
      </xsl:if>
      <propFinancierDetailsStateCode>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_StateCode</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:hypothecation_state/in2:value"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:hypothecation_state/in2:value">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:hypothecation_state/in2:value"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsStateCode>
      <propFinancierDetailsStateMandatary>
        <name>
          <!-- a simple mapping with no associated source:  to "namespaceURI"(string) -->
          <xsl:element name="namespaceURI">
            <xsl:text>http://schemas.datacontract.org/2004/07/CPMInsurance_ABC_WCFService</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "localPart"(string) -->
          <xsl:element name="localPart">
            <xsl:text>PropFinancierDetails_State_Mandatary</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "prefix"(string) -->
          <xsl:element name="prefix">
            <xsl:text></xsl:text>
          </xsl:element>
        </name>
        <!-- a simple mapping with no associated source:  to "declaredType"(string) -->
        <xsl:element name="declaredType">
          <xsl:text>java.lang.String</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "scope"(string) -->
        <xsl:element name="scope">
          <xsl:text>com.tagic.esb.cPMInsurenceClient.GeneralProposalFinancierDetails</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:financierData/in2:hypothecation_state/in2:name"(string) to "value"(string) -->
        <xsl:if test="in2:financierData/in2:hypothecation_state/in2:name">
          <xsl:element name="value">
            <xsl:value-of select="in2:financierData/in2:hypothecation_state/in2:name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "nil"(boolean) -->
        <xsl:element name="nil">
          <xsl:text>false</xsl:text>
        </xsl:element>
      </propFinancierDetailsStateMandatary>
    </generalProposalFinancierDetails>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:riskLocationDetails" to "RiskLocationDetails".  -->
  <xsl:template match="in2:riskLocationDetails"  mode="localRiskLocationDetailsToRiskLocationDetails_646244602">
    <RiskLocationDetails>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <Location>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Location</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationCode"(string) to "Value"(string) -->
        <xsl:if test="in2:locationCode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationCode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Location>
      <Isthelocationaddresssameasthecustomeraddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Is the location address same as the customer address</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Isthelocationaddresssameasthecustomeraddress>
      <AddressLine1>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Address Line 1</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:coverage_location_address_line1"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:coverage_location_address_line1">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:coverage_location_address_line1"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddressLine1>
      <AddressLine2>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Address Line 2</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:coverage_location_address_line2"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:coverage_location_address_line2">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:coverage_location_address_line2"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddressLine2>
      <AddressLine3>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Address Line 3</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:coverage_location_address_line3"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:coverage_location_address_line3">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:coverage_location_address_line3"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddressLine3>
      <Village>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Village</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Village>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:coverage_location_city/in2:name"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:coverage_location_city/in2:name">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:coverage_location_city/in2:name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <District>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>District</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:coverage_location_district/in2:name"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:coverage_location_district/in2:name">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:coverage_location_district/in2:name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </District>
      <State>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>State</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:coverge_location_state/in2:name"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:coverge_location_state/in2:name">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:coverge_location_state/in2:name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </State>
      <Country>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Country</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>INDIA</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Country>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:coverage_location_zipcode/in2:value"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:coverage_location_zipcode/in2:value">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:coverage_location_zipcode/in2:value"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <TACEQZone>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>TAC EQ Zone</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:tac_eq_zone"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:tac_eq_zone">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:tac_eq_zone"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </TACEQZone>
      <MREZone>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>MRE Zone</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:mreZone"(string) to "Value"(string) -->
        <xsl:if test="in2:mreZone">
          <xsl:element name="Value">
            <xsl:value-of select="in2:mreZone"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </MREZone>
      <CRESTAZone>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>CRESTA Zone</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDetails/in2:cresta_zone"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDetails/in2:cresta_zone">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDetails/in2:cresta_zone"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </CRESTAZone>
      <AgeoftheRisk>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Age of the Risk</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AgeoftheRisk>
      <TACOccupancy>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>TAC Occupancy</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:tacOccupancy"(string) to "Value"(string) -->
        <xsl:if test="in2:tacOccupancy">
          <xsl:element name="Value">
            <xsl:value-of select="in2:tacOccupancy"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </TACOccupancy>
      <OGISOccupancy>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>OGIS Occupancy</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>Construction-CAR</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </OGISOccupancy>
      <BusinessActivity>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Business Activity</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:tacOccupancy"(string) to "Value"(string) -->
        <xsl:if test="in2:tacOccupancy">
          <xsl:element name="Value">
            <xsl:value-of select="in2:tacOccupancy"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </BusinessActivity>
      <ConstructionClass>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Construction Class</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </ConstructionClass>
      <SICCode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>SIC Code</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </SICCode>
      <HazardGrade>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Hazard Grade</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </HazardGrade>
      <SICDescription>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>SIC Description</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </SICDescription>
      <SubSICCode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Sub SIC Code</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </SubSICCode>
      <SubSICDescription>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Sub SIC Description</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </SubSICDescription>
      <MinorLine>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Minor Line</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>CPM</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </MinorLine>
      <RiskEngineer>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Engineer</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>NA</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </RiskEngineer>
      <PML>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>PML</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>100</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </PML>
      <MFL>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>MFL</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>100</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </MFL>
      <MAS>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>MAS</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>100</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </MAS>
    </RiskLocationDetails>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:clauseWording" to "ClauseWordings".  -->
  <xsl:template match="in2:clauseWording"  mode="localClauseWordingToClauseWordings_840111531">
    <ClauseWordings>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <ClauseCode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Clause Code</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:insuring_clauses_code"(string) to "Value"(string) -->
        <xsl:if test="in2:insuring_clauses_code">
          <xsl:element name="Value">
            <xsl:value-of select="in2:insuring_clauses_code"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </ClauseCode>
      <ClauseDescription>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Clause Description</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:insuring_clauses_description"(string) to "Value"(string) -->
        <xsl:if test="in2:insuring_clauses_description">
          <xsl:element name="Value">
            <xsl:value-of select="in2:insuring_clauses_description"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </ClauseDescription>
    </ClauseWordings>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:warrantyDetails" to "WarrantyDetails".  -->
  <xsl:template match="in2:warrantyDetails"  mode="localWarrantyDetailsToWarrantyDetails_60469592">
    <WarrantyDetails>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <SerialNo>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Serial No</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:value"(string) to "Value"(string) -->
        <xsl:if test="in2:value">
          <xsl:element name="Value">
            <xsl:value-of select="in2:value"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </SerialNo>
      <WarrantyDescription>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>WarrantyDescription</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:name"(string) to "Value"(string) -->
        <xsl:if test="in2:name">
          <xsl:element name="Value">
            <xsl:value-of select="in2:name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </WarrantyDescription>
    </WarrantyDetails>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:additionalInsuredDetails" to "AdditionalInsuredDetail".  -->
  <xsl:template match="in2:additionalInsuredDetails"  mode="localAdditionalInsuredDetailsToAdditionalInsuredDetail_245131884">
    <AdditionalInsuredDetail>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <AdditionalInsuredName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>AdditionalInsuredName</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:name"(string) to "Value"(string) -->
        <xsl:if test="in2:name">
          <xsl:element name="Value">
            <xsl:value-of select="in2:name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AdditionalInsuredName>
      <AdditionalInsuredAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>AdditionalInsuredAddress</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:value"(string) to "Value"(string) -->
        <xsl:if test="in2:value">
          <xsl:element name="Value">
            <xsl:value-of select="in2:value"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AdditionalInsuredAddress>
    </AdditionalInsuredDetail>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:otherDetails" to "OtherDetails".  -->
  <xsl:template match="in2:otherDetails"  mode="localOtherDetailsToOtherDetails_1157686316">
    <OtherDetails>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <RiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationCode"(string) to "Value"(string) -->
        <xsl:if test="in2:locationCode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationCode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </RiskLocation>
      <RiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationAddress"(string) to "Value"(string) -->
        <xsl:if test="in2:locationAddress">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationAddress"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </RiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:city"(string) to "Value"(string) -->
        <xsl:if test="in2:city">
          <xsl:element name="Value">
            <xsl:value-of select="in2:city"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:pincode"(string) to "Value"(string) -->
        <xsl:if test="in2:pincode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:pincode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <Typeofequipment>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Type of equipment</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:descriptionOfEquipment/in2:equipment_name"(string) to "Value"(string) -->
        <xsl:if test="in2:descriptionOfEquipment/in2:equipment_name">
          <xsl:element name="Value">
            <xsl:value-of select="in2:descriptionOfEquipment/in2:equipment_name"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Typeofequipment>
      <IdentificationSerialNo>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Identification Serial No</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:descriptionOfEquipment/in2:equipment_identification_no"(string) to "Value"(string) -->
        <xsl:if test="in2:descriptionOfEquipment/in2:equipment_identification_no">
          <xsl:element name="Value">
            <xsl:value-of select="in2:descriptionOfEquipment/in2:equipment_identification_no"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </IdentificationSerialNo>
      <SpecificationKVAHPKgcm2>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Specification KVA HP Kg cm2</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </SpecificationKVAHPKgcm2>
      <Make>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Make</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:descriptionOfEquipment/in2:equipment_make"(string) to "Value"(string) -->
        <xsl:if test="in2:descriptionOfEquipment/in2:equipment_make">
          <xsl:element name="Value">
            <xsl:value-of select="in2:descriptionOfEquipment/in2:equipment_make"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Make>
      <ModelNo>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Model No</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:descriptionOfEquipment/in2:equipment_model_no"(string) to "Value"(string) -->
        <xsl:if test="in2:descriptionOfEquipment/in2:equipment_model_no">
          <xsl:element name="Value">
            <xsl:value-of select="in2:descriptionOfEquipment/in2:equipment_model_no"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </ModelNo>
      <EngineNo>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Engine No</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EngineNo>
      <ChasisNo>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Chasis No</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </ChasisNo>
      <YearofManufacture>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Year of Manufacture</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:descriptionOfEquipment/in2:equipment_manufacturing_year"(string) to "Value"(string) -->
        <xsl:if test="in2:descriptionOfEquipment/in2:equipment_manufacturing_year">
          <xsl:element name="Value">
            <xsl:value-of select="in2:descriptionOfEquipment/in2:equipment_manufacturing_year"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </YearofManufacture>
      <Quantity>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Quantity</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:descriptionOfEquipment/in2:equipment_quantity"(string) to "Value"(string) -->
        <xsl:if test="in2:descriptionOfEquipment/in2:equipment_quantity">
          <xsl:element name="Value">
            <xsl:value-of select="in2:descriptionOfEquipment/in2:equipment_quantity"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Quantity>
      <IsthereanyAMC>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Is there any AMC</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </IsthereanyAMC>
      <SumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:descriptionOfEquipment/in2:equipment_sum_insured"(string) to "Value"(string) -->
        <xsl:if test="in2:descriptionOfEquipment/in2:equipment_sum_insured">
          <xsl:element name="Value">
            <xsl:value-of select="in2:descriptionOfEquipment/in2:equipment_sum_insured"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </SumInsured>
      <TotalofSI>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total of SI</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:totalSI"(double) to "Value"(string) -->
        <xsl:if test="in2:totalSI">
          <xsl:element name="Value">
            <xsl:value-of select="in2:totalSI"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalofSI>
      <Remarks>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Remarks</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Remarks>
    </OtherDetails>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:deductibles" to "Deductibles".  -->
  <xsl:template match="in2:deductibles"  mode="localDeductiblesToDeductibles_703067102">
    <Deductibles>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <SrNo>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Sr No</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:serialNo"(int) to "Value"(string) -->
        <xsl:if test="in2:serialNo">
          <xsl:element name="Value">
            <xsl:value-of select="in2:serialNo"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </SrNo>
      <Valueofequipments>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Value of equipments</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:valueOfEquipment"(string) to "Value"(string) -->
        <xsl:if test="in2:valueOfEquipment">
          <xsl:element name="Value">
            <xsl:value-of select="in2:valueOfEquipment"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Valueofequipments>
      <ForclaimsarisingoutofAOGperils>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>For claims arising out of AOG perils</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:claimsOutAogPerils"(string) to "Value"(string) -->
        <xsl:if test="in2:claimsOutAogPerils">
          <xsl:element name="Value">
            <xsl:value-of select="in2:claimsOutAogPerils"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </ForclaimsarisingoutofAOGperils>
      <ForclaimsarisingotherthanAOGoutofperils>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>For claims arising other than AOG out of perils</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:claimsOutOtherAogPerils"(string) to "Value"(string) -->
        <xsl:if test="in2:claimsOutOtherAogPerils">
          <xsl:element name="Value">
            <xsl:value-of select="in2:claimsOutOtherAogPerils"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </ForclaimsarisingotherthanAOGoutofperils>
      <BoomSection>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Boom Section</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:boomSection"(string) to "Value"(string) -->
        <xsl:if test="in2:boomSection">
          <xsl:element name="Value">
            <xsl:value-of select="in2:boomSection"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </BoomSection>
      <ForMachineryunderGroupV>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>For Machinery under Group V</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </ForMachineryunderGroupV>
    </Deductibles>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:addOnCovers" to "AddonCoversClauses".  -->
  <xsl:template match="in2:addOnCovers"  mode="localAddOnCoversToAddonCoversClauses_456800579">
    <AddonCoversClauses>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <RiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationCode"(string) to "Value"(string) -->
        <xsl:if test="in2:locationCode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationCode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </RiskLocation>
      <RiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationAddress"(string) to "Value"(string) -->
        <xsl:if test="in2:locationAddress">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationAddress"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </RiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:city"(string) to "Value"(string) -->
        <xsl:if test="in2:city">
          <xsl:element name="Value">
            <xsl:value-of select="in2:city"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:pincode"(string) to "Value"(string) -->
        <xsl:if test="in2:pincode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:pincode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <AddonCoverName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Cover Name</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:CoverName"(string) to "Value"(string) -->
        <xsl:if test="in2:CoverName">
          <xsl:element name="Value">
            <xsl:value-of select="in2:CoverName"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddonCoverName>
      <AddonTypeofCover>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Type of Cover</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>Policy Level</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddonTypeofCover>
      <AddonSubLimitAmountorSumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Sub Limit Amount or Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:sumInsured"(double) to "Value"(string) -->
        <xsl:if test="in2:sumInsured">
          <xsl:element name="Value">
            <xsl:value-of select="in2:sumInsured"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonSubLimitAmountorSumInsured>
      <AddonRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Rate</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:rate"(double) to "Value"(string) -->
        <xsl:if test="in2:rate">
          <xsl:element name="Value">
            <xsl:value-of select="in2:rate"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonRate>
      <AddonPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Premium</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:premium"(double) to "Value"(string) -->
        <xsl:if test="in2:premium">
          <xsl:element name="Value">
            <xsl:value-of select="in2:premium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonPremium>
      <EndtAddonSuminsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Suminsured</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonSuminsured>
      <EndtAddonRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonRate>
      <EndtAddonPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonPremium>
      <Others>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Others</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Others>
      <TotalPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total Premium</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:totalPremium"(double) to "Value"(string) -->
        <xsl:if test="in2:totalPremium">
          <xsl:element name="Value">
            <xsl:value-of select="in2:totalPremium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalPremium>
      <DeletionofCoverwithRetainAmount>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Deletion of Cover with Retain Amount</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </DeletionofCoverwithRetainAmount>
      <AnyOneAccidentLimit>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Any One Accident Limit</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:sumInsured"(double) to "Value"(string) -->
        <xsl:if test="in2:sumInsured">
          <xsl:element name="Value">
            <xsl:value-of select="in2:sumInsured"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AnyOneAccidentLimit>
    </AddonCoversClauses>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:cpmGrid" to "CPMGrid".  -->
  <xsl:template match="in2:cpmGrid"  mode="localCpmGridToCPMGrid_1764274248">
    <CPMGrid>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <RiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationCode"(string) to "Value"(string) -->
        <xsl:if test="in2:locationCode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationCode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </RiskLocation>
      <RiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationAddress"(string) to "Value"(string) -->
        <xsl:if test="in2:locationAddress">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationAddress"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </RiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:city"(string) to "Value"(string) -->
        <xsl:if test="in2:city">
          <xsl:element name="Value">
            <xsl:value-of select="in2:city"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:pincode"(string) to "Value"(string) -->
        <xsl:if test="in2:pincode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:pincode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <Riskdescription>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk description</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDescription"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDescription">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDescription"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Riskdescription>
      <CoverName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Cover Name</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:CoverName"(string) to "Value"(string) -->
        <xsl:if test="in2:CoverName">
          <xsl:element name="Value">
            <xsl:value-of select="in2:CoverName"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </CoverName>
      <SumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:sumInsured"(double) to "Value"(string) -->
        <xsl:if test="in2:sumInsured">
          <xsl:element name="Value">
            <xsl:value-of select="in2:sumInsured"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </SumInsured>
      <Rate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Rate</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:rate"(double) to "Value"(string) -->
        <xsl:if test="in2:rate">
          <xsl:element name="Value">
            <xsl:value-of select="in2:rate"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Rate>
      <Premium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Premium</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:premium"(double) to "Value"(string) -->
        <xsl:if test="in2:premium">
          <xsl:element name="Value">
            <xsl:value-of select="in2:premium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Premium>
      <EndorsementSI>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement SI</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementSI>
      <EndorsementRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementRate>
      <EndorsementPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementPremium>
      <Others>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Others</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Others>
      <TotalPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total Premium</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:totalPremium"(double) to "Value"(string) -->
        <xsl:if test="in2:totalPremium">
          <xsl:element name="Value">
            <xsl:value-of select="in2:totalPremium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalPremium>
      <DeletionofCoverwithRetainAmount>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Deletion of Cover with Retain Amount</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </DeletionofCoverwithRetainAmount>
    </CPMGrid>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:addOnCovers" to "CPMFloaterPolicyAddonCoversClausesGrid".  -->
  <xsl:template match="in2:addOnCovers"  mode="localAddOnCoversToCPMFloaterPolicyAddonCoversClausesGrid_1019917724">
    <CPMFloaterPolicyAddonCoversClausesGrid>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <RiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </RiskLocation>
      <RiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </RiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <AddonCoverName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Cover Name</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>ABCDEF</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddonCoverName>
      <AddonTypeofCover>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Type of Cover</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>ABCDEF</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddonTypeofCover>
      <AddonSubLimitAmountorSumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Sub Limit Amount or Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonSubLimitAmountorSumInsured>
      <AddonRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonRate>
      <AddonPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonPremium>
      <EndtAddonSuminsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Suminsured</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonSuminsured>
      <EndtAddonRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonRate>
      <EndtAddonPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonPremium>
      <Others>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Others</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Others>
      <TotalPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalPremium>
      <DeletionofCoverwithRetainAmount>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Deletion of Cover with Retain Amount</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </DeletionofCoverwithRetainAmount>
      <AnyOneAccidentLimit>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Any One Accident Limit</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AnyOneAccidentLimit>
    </CPMFloaterPolicyAddonCoversClausesGrid>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:cpmGrid" to "CPMFloaterPolicyGrid".  -->
  <xsl:template match="in2:cpmGrid"  mode="localCpmGridToCPMFloaterPolicyGrid_835881468">
    <CPMFloaterPolicyGrid>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <FloaterRiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </FloaterRiskLocation>
      <FloaterRiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </FloaterRiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <Riskdescription>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk description</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Riskdescription>
      <CoverName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Cover Name</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </CoverName>
      <SumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </SumInsured>
      <Rate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Rate>
      <Premium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Premium>
      <EndorsementSI>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement SI</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementSI>
      <EndorsementRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementRate>
      <EndorsementPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementPremium>
      <Others>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Others</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Others>
      <TotalPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalPremium>
      <DeletionofCoverwithRetainAmount>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Deletion of Cover with Retain Amount</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </DeletionofCoverwithRetainAmount>
    </CPMFloaterPolicyGrid>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:addOnCovers" to "AddonCoversClauses".  -->
  <xsl:template match="in2:addOnCovers"  mode="localAddOnCoversToAddonCoversClauses_1825797407">
    <AddonCoversClauses>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <RiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </RiskLocation>
      <RiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </RiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <AddonCoverName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Cover Name</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>ABCD</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddonCoverName>
      <AddonTypeofCover>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Type of Cover</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>ABCD</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddonTypeofCover>
      <AddonSubLimitAmountorSumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Sub Limit Amount or Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonSubLimitAmountorSumInsured>
      <AddonRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonRate>
      <AddonPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonPremium>
      <EndtAddonSuminsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Suminsured</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonSuminsured>
      <EndtAddonRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonRate>
      <EndtAddonPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonPremium>
      <Others>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Others</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Others>
      <TotalPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalPremium>
      <DeletionofCoverwithRetainAmount>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Deletion of Cover with Retain Amount</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </DeletionofCoverwithRetainAmount>
      <AnyOneAccidentLimit>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Any One Accident Limit</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AnyOneAccidentLimit>
    </AddonCoversClauses>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:addOnCovers" to "CPMFloaterPolicyAddonCoversClausesGrid".  -->
  <xsl:template match="in2:addOnCovers"  mode="localAddOnCoversToCPMFloaterPolicyAddonCoversClausesGrid_296244812">
    <CPMFloaterPolicyAddonCoversClausesGrid>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <RiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationCode"(string) to "Value"(string) -->
        <xsl:if test="in2:locationCode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationCode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </RiskLocation>
      <RiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationAddress"(string) to "Value"(string) -->
        <xsl:if test="in2:locationAddress">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationAddress"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </RiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:city"(string) to "Value"(string) -->
        <xsl:if test="in2:city">
          <xsl:element name="Value">
            <xsl:value-of select="in2:city"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:pincode"(string) to "Value"(string) -->
        <xsl:if test="in2:pincode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:pincode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <AddonCoverName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Cover Name</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:CoverName"(string) to "Value"(string) -->
        <xsl:if test="in2:CoverName">
          <xsl:element name="Value">
            <xsl:value-of select="in2:CoverName"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddonCoverName>
      <AddonTypeofCover>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Type of Cover</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>Policy Level</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </AddonTypeofCover>
      <AddonSubLimitAmountorSumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Sub Limit Amount or Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:sumInsured"(double) to "Value"(string) -->
        <xsl:if test="in2:sumInsured">
          <xsl:element name="Value">
            <xsl:value-of select="in2:sumInsured"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonSubLimitAmountorSumInsured>
      <AddonRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Rate</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:rate"(double) to "Value"(string) -->
        <xsl:if test="in2:rate">
          <xsl:element name="Value">
            <xsl:value-of select="in2:rate"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonRate>
      <AddonPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Add on Premium</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:premium"(double) to "Value"(string) -->
        <xsl:if test="in2:premium">
          <xsl:element name="Value">
            <xsl:value-of select="in2:premium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AddonPremium>
      <EndtAddonSuminsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Suminsured</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonSuminsured>
      <EndtAddonRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonRate>
      <EndtAddonPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endt Add on Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndtAddonPremium>
      <Others>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Others</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Others>
      <TotalPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total Premium</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:totalPremium"(double) to "Value"(string) -->
        <xsl:if test="in2:totalPremium">
          <xsl:element name="Value">
            <xsl:value-of select="in2:totalPremium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalPremium>
      <DeletionofCoverwithRetainAmount>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Deletion of Cover with Retain Amount</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </DeletionofCoverwithRetainAmount>
      <AnyOneAccidentLimit>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Any One Accident Limit</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:sumInsured"(double) to "Value"(string) -->
        <xsl:if test="in2:sumInsured">
          <xsl:element name="Value">
            <xsl:value-of select="in2:sumInsured"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </AnyOneAccidentLimit>
    </CPMFloaterPolicyAddonCoversClausesGrid>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:cpmGrid" to "CPMGrid".  -->
  <xsl:template match="in2:cpmGrid"  mode="localCpmGridToCPMGrid_1107709712">
    <CPMGrid>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <RiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </RiskLocation>
      <RiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </RiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <Riskdescription>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk description</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Riskdescription>
      <CoverName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Cover Name</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </CoverName>
      <SumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </SumInsured>
      <Rate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Rate>
      <Premium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Premium>
      <EndorsementSI>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement SI</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementSI>
      <EndorsementRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementRate>
      <EndorsementPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementPremium>
      <Others>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Others</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Others>
      <TotalPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalPremium>
      <DeletionofCoverwithRetainAmount>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Deletion of Cover with Retain Amount</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </DeletionofCoverwithRetainAmount>
    </CPMGrid>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in2:cpmGrid" to "CPMFloaterPolicyGrid".  -->
  <xsl:template match="in2:cpmGrid"  mode="localCpmGridToCPMFloaterPolicyGrid_313841642">
    <CPMFloaterPolicyGrid>
      <!-- a simple mapping with no associated source:  to "Type"(string) -->
      <Type>
        <xsl:text>GroupData</xsl:text>
      </Type>
      <FloaterRiskLocation>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationCode"(string) to "Value"(string) -->
        <xsl:if test="in2:locationCode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationCode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </FloaterRiskLocation>
      <FloaterRiskLocationAddress>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk Location Address</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:locationAddress"(string) to "Value"(string) -->
        <xsl:if test="in2:locationAddress">
          <xsl:element name="Value">
            <xsl:value-of select="in2:locationAddress"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </FloaterRiskLocationAddress>
      <City>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>City</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:city"(string) to "Value"(string) -->
        <xsl:if test="in2:city">
          <xsl:element name="Value">
            <xsl:value-of select="in2:city"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </City>
      <Pincode>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Pincode</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:pincode"(string) to "Value"(string) -->
        <xsl:if test="in2:pincode">
          <xsl:element name="Value">
            <xsl:value-of select="in2:pincode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Pincode>
      <Riskdescription>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Risk description</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:riskDescription"(string) to "Value"(string) -->
        <xsl:if test="in2:riskDescription">
          <xsl:element name="Value">
            <xsl:value-of select="in2:riskDescription"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Riskdescription>
      <CoverName>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Cover Name</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:CoverName"(string) to "Value"(string) -->
        <xsl:if test="in2:CoverName">
          <xsl:element name="Value">
            <xsl:value-of select="in2:CoverName"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </CoverName>
      <SumInsured>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Sum Insured</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:sumInsured"(double) to "Value"(string) -->
        <xsl:if test="in2:sumInsured">
          <xsl:element name="Value">
            <xsl:value-of select="in2:sumInsured"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </SumInsured>
      <Rate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Rate</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:rate"(double) to "Value"(string) -->
        <xsl:if test="in2:rate">
          <xsl:element name="Value">
            <xsl:value-of select="in2:rate"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Rate>
      <Premium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Premium</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:premium"(double) to "Value"(string) -->
        <xsl:if test="in2:premium">
          <xsl:element name="Value">
            <xsl:value-of select="in2:premium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </Premium>
      <EndorsementSI>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement SI</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementSI>
      <EndorsementRate>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement Rate</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementRate>
      <EndorsementPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Endorsement Premium</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </EndorsementPremium>
      <Others>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Others</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text></xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </Others>
      <TotalPremium>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Total Premium</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "in2:totalPremium"(double) to "Value"(string) -->
        <xsl:if test="in2:totalPremium">
          <xsl:element name="Value">
            <xsl:value-of select="in2:totalPremium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>Double</xsl:text>
        </xsl:element>
      </TotalPremium>
      <DeletionofCoverwithRetainAmount>
        <!-- a simple mapping with no associated source:  to "Name"(string) -->
        <xsl:element name="Name">
          <xsl:text>Deletion of Cover with Retain Amount</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Value"(string) -->
        <xsl:element name="Value">
          <xsl:text>0</xsl:text>
        </xsl:element>
        <!-- a simple mapping with no associated source:  to "Type"(string) -->
        <xsl:element name="Type">
          <xsl:text>String</xsl:text>
        </xsl:element>
      </DeletionofCoverwithRetainAmount>
    </CPMFloaterPolicyGrid>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::node()[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
