<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="com/tagic/gc/cpm/xslt/CPMResponse.map" md5sum="7a0c06b338a94aa122ff2417a8b883fa" version="8.0.501" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		CPMResponse.map
*   Map declaration(s):	CPMResponse
*   Input file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FImpl-GcCpm%257DcpmSharedBO/message%3D%257Bhttp%253A%252F%252FImpl-GcCpmLibrary%252FGCIntegrationCPM%257DcpmGCProposalSyncResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FImpl-GcCpm%257DcpmSharedBO/message%3D%257Bhttp%253A%252F%252FImpl-GcCpmLibrary%252FPaceGCCPMIntegration%257DpaceCPMGCProposalSyncResponseMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xltxe="http://www.ibm.com/xmlns/prod/xltxe-j"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://Impl-GcCpm"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:in="wsdl.http://Impl-GcCpmLibrary/GCIntegrationCPM"
    xmlns:io="http://www.w3.org/2005/08/addressing"
    xmlns:io3="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:in2="http://Impl-GcCpmLibrary/GCIntegrationCPM"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io4="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:in3="http://Impl-GcCpmLibrary"
    xmlns:out2="http://NBDATA"
    xmlns:out3="http://Impl-GcCpmLibrary/PaceGCCPMIntegration"
    xmlns:out="wsdl.http://Impl-GcCpmLibrary/PaceGCCPMIntegration"
    xmlns:out4="http://GCD"
    xmlns:map="http://Impl-GcCpm/com/tagic/gc/cpm/xslt/CPMResponse"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set fn math map xltxe msl"
    version="2.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io4:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:CPMResponse2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io4:smo" mode="map:CPMResponse"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io4:smo" to "io4:smo".  -->
  <xsl:template match="io4:smo"  mode="map:CPMResponse">
    <io4:smo>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:paceCPMGCProposalSyncResponseMsg'"/>
        </xsl:attribute>
        <out3:paceCPMGCProposalSyncResponse>
          <!-- variables for custom code -->
          <xsl:variable name="proposalNo" select="body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/proposalNo"/>
          <xsl:variable name="totalPremium" select="body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/totalPremium"/>
          <xsl:choose>
            <xsl:when test="fn:boolean($proposalNo) and $proposalNo != &apos;&apos;">
              <paceCPMResponse>
                <!-- a simple mapping with no associated source:  to "out2:status"(string) -->
                <xsl:element name="out2:status">
                  <xsl:text>200</xsl:text>
                </xsl:element>
                <!-- a simple data mapping: "body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/proposalNo"(string) to "out2:data"(string) -->
                <xsl:if test="body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/proposalNo">
                  <xsl:element name="out2:data">
                    <xsl:value-of select="body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/proposalNo"/>
                  </xsl:element>
                </xsl:if>
              </paceCPMResponse>
              <!-- a simple data mapping: "body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/totalPremium"(double) to "totalPremium"(double) -->
              <xsl:element name="totalPremium">
                <xsl:value-of select="body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/totalPremium"/>
              </xsl:element>
            </xsl:when>
            <xsl:otherwise>
              <paceCPMResponse>
                <!-- a simple mapping with no associated source:  to "out2:status"(string) -->
                <xsl:element name="out2:status">
                  <xsl:text>400</xsl:text>
                </xsl:element>
                <!-- variables for custom code -->
                <xsl:variable name="errorText" select="body/in2:cpmGCProposalSyncResponse/cpmGCResponse/errorText"/>
                <xsl:choose>
                  <xsl:when test="fn:boolean($errorText) and $errorText != &apos;&apos;">
                    <!-- a simple data mapping: "body/in2:cpmGCProposalSyncResponse/cpmGCResponse/errorText"(string) to "out2:data"(string) -->
                    <xsl:element name="out2:data">
                      <xsl:value-of select="body/in2:cpmGCProposalSyncResponse/cpmGCResponse/errorText"/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <!-- a simple data mapping: "body/in2:cpmGCProposalSyncResponse/cpmGCResponse/error"(string) to "out2:data"(string) -->
                    <xsl:element name="out2:data">
                      <xsl:value-of select="body/in2:cpmGCProposalSyncResponse/cpmGCResponse/error"/>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </paceCPMResponse>
            </xsl:otherwise>
          </xsl:choose>
        </out3:paceCPMGCProposalSyncResponse>
      </body>
    </io4:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io4:smo" to "io4:smo".  -->
  <xsl:template name="map:CPMResponse2">
    <xsl:param name="smo"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:paceCPMGCProposalSyncResponseMsg'"/>
      </xsl:attribute>
      <out3:paceCPMGCProposalSyncResponse>
        <!-- variables for custom code -->
        <xsl:variable name="proposalNo" select="$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/proposalNo"/>
        <xsl:variable name="totalPremium" select="$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/totalPremium"/>
        <xsl:choose>
          <xsl:when test="fn:boolean($proposalNo) and $proposalNo != &apos;&apos;">
            <paceCPMResponse>
              <!-- a simple mapping with no associated source:  to "out2:status"(string) -->
              <xsl:element name="out2:status">
                <xsl:text>200</xsl:text>
              </xsl:element>
              <!-- a simple data mapping: "$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/proposalNo"(string) to "out2:data"(string) -->
              <xsl:if test="$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/proposalNo">
                <xsl:element name="out2:data">
                  <xsl:value-of select="$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/proposalNo"/>
                </xsl:element>
              </xsl:if>
            </paceCPMResponse>
            <!-- a simple data mapping: "$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/totalPremium"(double) to "totalPremium"(double) -->
            <xsl:element name="totalPremium">
              <xsl:value-of select="$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/responseXML/uwOperationResult/totalPremium"/>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <paceCPMResponse>
              <!-- a simple mapping with no associated source:  to "out2:status"(string) -->
              <xsl:element name="out2:status">
                <xsl:text>400</xsl:text>
              </xsl:element>
              <!-- variables for custom code -->
              <xsl:variable name="errorText" select="$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/errorText"/>
              <xsl:choose>
                <xsl:when test="fn:boolean($errorText) and $errorText != &apos;&apos;">
                  <!-- a simple data mapping: "$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/errorText"(string) to "out2:data"(string) -->
                  <xsl:element name="out2:data">
                    <xsl:value-of select="$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/errorText"/>
                  </xsl:element>
                </xsl:when>
                <xsl:otherwise>
                  <!-- a simple data mapping: "$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/error"(string) to "out2:data"(string) -->
                  <xsl:element name="out2:data">
                    <xsl:value-of select="$smo/body/in2:cpmGCProposalSyncResponse/cpmGCResponse/error"/>
                  </xsl:element>
                </xsl:otherwise>
              </xsl:choose>
            </paceCPMResponse>
          </xsl:otherwise>
        </xsl:choose>
      </out3:paceCPMGCProposalSyncResponse>
    </body>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::node()[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
